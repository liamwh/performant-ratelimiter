<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="5990"><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.2003%" y="213" width="0.0167%" height="15" fill="rgb(232,26,8)" fg:x="12" fg:w="1"/><text x="0.4503%" y="223.50"></text></g><g><title>__libc_malloc (121 samples, 2.02%)</title><rect x="0.5008%" y="181" width="2.0200%" height="15" fill="rgb(216,166,38)" fg:x="30" fg:w="121"/><text x="0.7508%" y="191.50">_..</text></g><g><title>ratelimit_benchmark::benchmark_ratelimiter3_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.02%)</title><rect x="2.5209%" y="181" width="0.0167%" height="15" fill="rgb(251,202,51)" fg:x="151" fg:w="1"/><text x="2.7709%" y="191.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (8 samples, 0.13%)</title><rect x="3.0050%" y="165" width="0.1336%" height="15" fill="rgb(254,216,34)" fg:x="180" fg:w="8"/><text x="3.2550%" y="175.50"></text></g><g><title>tokio::runtime::context::with_scheduler (7 samples, 0.12%)</title><rect x="3.1386%" y="165" width="0.1169%" height="15" fill="rgb(251,32,27)" fg:x="188" fg:w="7"/><text x="3.3886%" y="175.50"></text></g><g><title>tokio::runtime::task::id::Id::next (9 samples, 0.15%)</title><rect x="3.2554%" y="165" width="0.1503%" height="15" fill="rgb(208,127,28)" fg:x="195" fg:w="9"/><text x="3.5054%" y="175.50"></text></g><g><title>__rdl_alloc (169 samples, 2.82%)</title><rect x="3.9733%" y="133" width="2.8214%" height="15" fill="rgb(224,137,22)" fg:x="238" fg:w="169"/><text x="4.2233%" y="143.50">__..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (169 samples, 2.82%)</title><rect x="3.9733%" y="117" width="2.8214%" height="15" fill="rgb(254,70,32)" fg:x="238" fg:w="169"/><text x="4.2233%" y="127.50">st..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (169 samples, 2.82%)</title><rect x="3.9733%" y="101" width="2.8214%" height="15" fill="rgb(229,75,37)" fg:x="238" fg:w="169"/><text x="4.2233%" y="111.50">st..</text></g><g><title>posix_memalign (168 samples, 2.80%)</title><rect x="3.9900%" y="85" width="2.8047%" height="15" fill="rgb(252,64,23)" fg:x="239" fg:w="168"/><text x="4.2400%" y="95.50">po..</text></g><g><title>__default_morecore (3 samples, 0.05%)</title><rect x="6.7446%" y="69" width="0.0501%" height="15" fill="rgb(232,162,48)" fg:x="404" fg:w="3"/><text x="6.9946%" y="79.50"></text></g><g><title>sbrk (3 samples, 0.05%)</title><rect x="6.7446%" y="53" width="0.0501%" height="15" fill="rgb(246,160,12)" fg:x="404" fg:w="3"/><text x="6.9946%" y="63.50"></text></g><g><title>brk (3 samples, 0.05%)</title><rect x="6.7446%" y="37" width="0.0501%" height="15" fill="rgb(247,166,0)" fg:x="404" fg:w="3"/><text x="6.9946%" y="47.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (195 samples, 3.26%)</title><rect x="3.5559%" y="149" width="3.2554%" height="15" fill="rgb(249,219,21)" fg:x="213" fg:w="195"/><text x="3.8059%" y="159.50">tok..</text></g><g><title>tokio::runtime::task::core::Trailer::new (1 samples, 0.02%)</title><rect x="6.7947%" y="133" width="0.0167%" height="15" fill="rgb(205,209,3)" fg:x="407" fg:w="1"/><text x="7.0447%" y="143.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::header (2 samples, 0.03%)</title><rect x="7.1285%" y="133" width="0.0334%" height="15" fill="rgb(243,44,1)" fg:x="427" fg:w="2"/><text x="7.3785%" y="143.50"></text></g><g><title>&lt;tokio::runtime::task::raw::RawTask as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="7.3790%" y="117" width="0.0167%" height="15" fill="rgb(206,159,16)" fg:x="442" fg:w="1"/><text x="7.6290%" y="127.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (41 samples, 0.68%)</title><rect x="6.8114%" y="149" width="0.6845%" height="15" fill="rgb(244,77,30)" fg:x="408" fg:w="41"/><text x="7.0614%" y="159.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (20 samples, 0.33%)</title><rect x="7.1619%" y="133" width="0.3339%" height="15" fill="rgb(218,69,12)" fg:x="429" fg:w="20"/><text x="7.4119%" y="143.50"></text></g><g><title>tokio::runtime::task::core::Header::get_trailer (6 samples, 0.10%)</title><rect x="7.3957%" y="117" width="0.1002%" height="15" fill="rgb(212,87,7)" fg:x="443" fg:w="6"/><text x="7.6457%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (438 samples, 7.31%)</title><rect x="0.2170%" y="197" width="7.3122%" height="15" fill="rgb(245,114,25)" fg:x="13" fg:w="438"/><text x="0.4670%" y="207.50">&lt;alloc::ve..</text></g><g><title>tokio::task::spawn::spawn (299 samples, 4.99%)</title><rect x="2.5376%" y="181" width="4.9917%" height="15" fill="rgb(210,61,42)" fg:x="152" fg:w="299"/><text x="2.7876%" y="191.50">tokio:..</text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (247 samples, 4.12%)</title><rect x="3.4057%" y="165" width="4.1235%" height="15" fill="rgb(211,52,33)" fg:x="204" fg:w="247"/><text x="3.6557%" y="175.50">toki..</text></g><g><title>tokio::runtime::task::state::State::new (2 samples, 0.03%)</title><rect x="7.4958%" y="149" width="0.0334%" height="15" fill="rgb(234,58,33)" fg:x="449" fg:w="2"/><text x="7.7458%" y="159.50"></text></g><g><title>__libc_free (10 samples, 0.17%)</title><rect x="7.5793%" y="181" width="0.1669%" height="15" fill="rgb(220,115,36)" fg:x="454" fg:w="10"/><text x="7.8293%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (330 samples, 5.51%)</title><rect x="7.5292%" y="197" width="5.5092%" height="15" fill="rgb(243,153,54)" fg:x="451" fg:w="330"/><text x="7.7792%" y="207.50">&lt;core::..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (317 samples, 5.29%)</title><rect x="7.7462%" y="181" width="5.2922%" height="15" fill="rgb(251,47,18)" fg:x="464" fg:w="317"/><text x="7.9962%" y="191.50">future..</text></g><g><title>__libc_malloc (240 samples, 4.01%)</title><rect x="9.0317%" y="165" width="4.0067%" height="15" fill="rgb(242,102,42)" fg:x="541" fg:w="240"/><text x="9.2817%" y="175.50">__li..</text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="15.8097%" y="149" width="0.0501%" height="15" fill="rgb(234,31,38)" fg:x="947" fg:w="3"/><text x="16.0597%" y="159.50"></text></g><g><title>futures_task::waker::clone_arc_raw (2 samples, 0.03%)</title><rect x="16.4441%" y="117" width="0.0334%" height="15" fill="rgb(221,117,51)" fg:x="985" fg:w="2"/><text x="16.6941%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (55 samples, 0.92%)</title><rect x="15.8598%" y="149" width="0.9182%" height="15" fill="rgb(212,20,18)" fg:x="950" fg:w="55"/><text x="16.1098%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (25 samples, 0.42%)</title><rect x="16.3606%" y="133" width="0.4174%" height="15" fill="rgb(245,133,36)" fg:x="980" fg:w="25"/><text x="16.6106%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (18 samples, 0.30%)</title><rect x="16.4775%" y="117" width="0.3005%" height="15" fill="rgb(212,6,19)" fg:x="987" fg:w="18"/><text x="16.7275%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (149 samples, 2.49%)</title><rect x="14.3740%" y="165" width="2.4875%" height="15" fill="rgb(218,1,36)" fg:x="861" fg:w="149"/><text x="14.6240%" y="175.50">&lt;t..</text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (5 samples, 0.08%)</title><rect x="16.7780%" y="149" width="0.0835%" height="15" fill="rgb(246,84,54)" fg:x="1005" fg:w="5"/><text x="17.0280%" y="159.50"></text></g><g><title>__libc_free (54 samples, 0.90%)</title><rect x="17.0618%" y="149" width="0.9015%" height="15" fill="rgb(242,110,6)" fg:x="1022" fg:w="54"/><text x="17.3118%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 0.23%)</title><rect x="17.9633%" y="149" width="0.2337%" height="15" fill="rgb(214,47,5)" fg:x="1076" fg:w="14"/><text x="18.2133%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (12 samples, 0.20%)</title><rect x="18.1970%" y="149" width="0.2003%" height="15" fill="rgb(218,159,25)" fg:x="1090" fg:w="12"/><text x="18.4470%" y="159.50"></text></g><g><title>futures_task::waker::drop_arc_raw (8 samples, 0.13%)</title><rect x="18.2638%" y="133" width="0.1336%" height="15" fill="rgb(215,211,28)" fg:x="1094" fg:w="8"/><text x="18.5138%" y="143.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (14 samples, 0.23%)</title><rect x="18.6811%" y="117" width="0.2337%" height="15" fill="rgb(238,59,32)" fg:x="1119" fg:w="14"/><text x="18.9311%" y="127.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (30 samples, 0.50%)</title><rect x="18.4307%" y="133" width="0.5008%" height="15" fill="rgb(226,82,3)" fg:x="1104" fg:w="30"/><text x="18.6807%" y="143.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.02%)</title><rect x="18.9149%" y="117" width="0.0167%" height="15" fill="rgb(240,164,32)" fg:x="1133" fg:w="1"/><text x="19.1649%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (42 samples, 0.70%)</title><rect x="18.3973%" y="149" width="0.7012%" height="15" fill="rgb(232,46,7)" fg:x="1102" fg:w="42"/><text x="18.6473%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (10 samples, 0.17%)</title><rect x="18.9316%" y="133" width="0.1669%" height="15" fill="rgb(229,129,53)" fg:x="1134" fg:w="10"/><text x="19.1816%" y="143.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::drop_join_handle_slow (2 samples, 0.03%)</title><rect x="19.0985%" y="149" width="0.0334%" height="15" fill="rgb(234,188,29)" fg:x="1144" fg:w="2"/><text x="19.3485%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt; (147 samples, 2.45%)</title><rect x="16.8614%" y="165" width="2.4541%" height="15" fill="rgb(246,141,4)" fg:x="1010" fg:w="147"/><text x="17.1114%" y="175.50">co..</text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (11 samples, 0.18%)</title><rect x="19.1319%" y="149" width="0.1836%" height="15" fill="rgb(229,23,39)" fg:x="1146" fg:w="11"/><text x="19.3819%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::ArcInner&lt;futures_util::stream::futures_unordered::ready_to_run_queue::ReadyToRunQueue&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="19.3155%" y="165" width="0.0167%" height="15" fill="rgb(206,12,3)" fg:x="1157" fg:w="1"/><text x="19.5655%" y="175.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (1,163 samples, 19.42%)</title><rect x="0.2170%" y="213" width="19.4157%" height="15" fill="rgb(252,226,20)" fg:x="13" fg:w="1163"/><text x="0.4670%" y="223.50">criterion::bencher::AsyncBench..</text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (395 samples, 6.59%)</title><rect x="13.0384%" y="197" width="6.5943%" height="15" fill="rgb(216,123,35)" fg:x="781" fg:w="395"/><text x="13.2884%" y="207.50">&lt;futures_..</text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (390 samples, 6.51%)</title><rect x="13.1219%" y="181" width="6.5109%" height="15" fill="rgb(212,68,40)" fg:x="786" fg:w="390"/><text x="13.3719%" y="191.50">&lt;futures_..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (18 samples, 0.30%)</title><rect x="19.3322%" y="165" width="0.3005%" height="15" fill="rgb(254,125,32)" fg:x="1158" fg:w="18"/><text x="19.5822%" y="175.50"></text></g><g><title>tokio::runtime::coop::Budget::initial (2 samples, 0.03%)</title><rect x="19.6327%" y="213" width="0.0334%" height="15" fill="rgb(253,97,22)" fg:x="1176" fg:w="2"/><text x="19.8827%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (1 samples, 0.02%)</title><rect x="19.6661%" y="213" width="0.0167%" height="15" fill="rgb(241,101,14)" fg:x="1178" fg:w="1"/><text x="19.9161%" y="223.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.02%)</title><rect x="19.6661%" y="197" width="0.0167%" height="15" fill="rgb(238,103,29)" fg:x="1178" fg:w="1"/><text x="19.9161%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (6 samples, 0.10%)</title><rect x="19.6828%" y="213" width="0.1002%" height="15" fill="rgb(233,195,47)" fg:x="1179" fg:w="6"/><text x="19.9328%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::tick (2 samples, 0.03%)</title><rect x="19.7830%" y="213" width="0.0334%" height="15" fill="rgb(246,218,30)" fg:x="1185" fg:w="2"/><text x="20.0330%" y="223.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.07%)</title><rect x="20.2838%" y="181" width="0.0668%" height="15" fill="rgb(219,145,47)" fg:x="1215" fg:w="4"/><text x="20.5338%" y="191.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (18 samples, 0.30%)</title><rect x="20.7679%" y="149" width="0.3005%" height="15" fill="rgb(243,12,26)" fg:x="1244" fg:w="18"/><text x="21.0179%" y="159.50"></text></g><g><title>clock_getres (1 samples, 0.02%)</title><rect x="21.1519%" y="133" width="0.0167%" height="15" fill="rgb(214,87,16)" fg:x="1267" fg:w="1"/><text x="21.4019%" y="143.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (45 samples, 0.75%)</title><rect x="21.0684%" y="149" width="0.7513%" height="15" fill="rgb(208,99,42)" fg:x="1262" fg:w="45"/><text x="21.3184%" y="159.50"></text></g><g><title>clock_gettime (39 samples, 0.65%)</title><rect x="21.1686%" y="133" width="0.6511%" height="15" fill="rgb(253,99,2)" fg:x="1268" fg:w="39"/><text x="21.4186%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (17 samples, 0.28%)</title><rect x="21.8197%" y="133" width="0.2838%" height="15" fill="rgb(220,168,23)" fg:x="1307" fg:w="17"/><text x="22.0697%" y="143.50"></text></g><g><title>chrono::offset::utc::Utc::now (98 samples, 1.64%)</title><rect x="20.5509%" y="165" width="1.6361%" height="15" fill="rgb(242,38,24)" fg:x="1231" fg:w="98"/><text x="20.8009%" y="175.50"></text></g><g><title>std::time::SystemTime::duration_since (22 samples, 0.37%)</title><rect x="21.8197%" y="149" width="0.3673%" height="15" fill="rgb(225,182,9)" fg:x="1307" fg:w="22"/><text x="22.0697%" y="159.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (5 samples, 0.08%)</title><rect x="22.1035%" y="133" width="0.0835%" height="15" fill="rgb(243,178,37)" fg:x="1324" fg:w="5"/><text x="22.3535%" y="143.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (4 samples, 0.07%)</title><rect x="22.1202%" y="117" width="0.0668%" height="15" fill="rgb(232,139,19)" fg:x="1325" fg:w="4"/><text x="22.3702%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (4 samples, 0.07%)</title><rect x="22.1202%" y="101" width="0.0668%" height="15" fill="rgb(225,201,24)" fg:x="1325" fg:w="4"/><text x="22.3702%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::ge (4 samples, 0.07%)</title><rect x="22.1202%" y="85" width="0.0668%" height="15" fill="rgb(221,47,46)" fg:x="1325" fg:w="4"/><text x="22.3702%" y="95.50"></text></g><g><title>&lt;crossbeam_skiplist::map::Entry&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.32%)</title><rect x="26.6110%" y="149" width="0.3172%" height="15" fill="rgb(249,23,13)" fg:x="1594" fg:w="19"/><text x="26.8610%" y="159.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="26.9282%" y="101" width="0.0167%" height="15" fill="rgb(219,9,5)" fg:x="1613" fg:w="1"/><text x="27.1782%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (46 samples, 0.77%)</title><rect x="26.9282%" y="149" width="0.7679%" height="15" fill="rgb(254,171,16)" fg:x="1613" fg:w="46"/><text x="27.1782%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (46 samples, 0.77%)</title><rect x="26.9282%" y="133" width="0.7679%" height="15" fill="rgb(230,171,20)" fg:x="1613" fg:w="46"/><text x="27.1782%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (46 samples, 0.77%)</title><rect x="26.9282%" y="117" width="0.7679%" height="15" fill="rgb(210,71,41)" fg:x="1613" fg:w="46"/><text x="27.1782%" y="127.50"></text></g><g><title>realloc (45 samples, 0.75%)</title><rect x="26.9449%" y="101" width="0.7513%" height="15" fill="rgb(206,173,20)" fg:x="1614" fg:w="45"/><text x="27.1949%" y="111.50"></text></g><g><title>chrono::naive::date::NaiveDate::add_days (1 samples, 0.02%)</title><rect x="27.9800%" y="133" width="0.0167%" height="15" fill="rgb(233,88,34)" fg:x="1676" fg:w="1"/><text x="28.2300%" y="143.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (22 samples, 0.37%)</title><rect x="27.6962%" y="149" width="0.3673%" height="15" fill="rgb(223,209,46)" fg:x="1659" fg:w="22"/><text x="27.9462%" y="159.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (4 samples, 0.07%)</title><rect x="27.9967%" y="133" width="0.0668%" height="15" fill="rgb(250,43,18)" fg:x="1677" fg:w="4"/><text x="28.2467%" y="143.50"></text></g><g><title>crossbeam_epoch::default::with_handle (5 samples, 0.08%)</title><rect x="28.0634%" y="149" width="0.0835%" height="15" fill="rgb(208,13,10)" fg:x="1681" fg:w="5"/><text x="28.3134%" y="159.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (3 samples, 0.05%)</title><rect x="28.0968%" y="133" width="0.0501%" height="15" fill="rgb(212,200,36)" fg:x="1683" fg:w="3"/><text x="28.3468%" y="143.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (3 samples, 0.05%)</title><rect x="28.0968%" y="117" width="0.0501%" height="15" fill="rgb(225,90,30)" fg:x="1683" fg:w="3"/><text x="28.3468%" y="127.50"></text></g><g><title>crossbeam_epoch::guard::Guard::collector (1 samples, 0.02%)</title><rect x="28.5476%" y="133" width="0.0167%" height="15" fill="rgb(236,182,39)" fg:x="1710" fg:w="1"/><text x="28.7976%" y="143.50"></text></g><g><title>ratelimit_benchmark::benchmark_ratelimiter2_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (4,378 samples, 73.09%)</title><rect x="20.3506%" y="181" width="73.0885%" height="15" fill="rgb(212,144,35)" fg:x="1219" fg:w="4378"/><text x="20.6006%" y="191.50">ratelimit_benchmark::benchmark_ratelimiter2_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>ratelimit::version2::RateLimiter2::ratelimit2 (4,268 samples, 71.25%)</title><rect x="22.1870%" y="165" width="71.2521%" height="15" fill="rgb(228,63,44)" fg:x="1329" fg:w="4268"/><text x="22.4370%" y="175.50">ratelimit::version2::RateLimiter2::ratelimit2</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (3,911 samples, 65.29%)</title><rect x="28.1469%" y="149" width="65.2922%" height="15" fill="rgb(228,109,6)" fg:x="1686" fg:w="3911"/><text x="28.3969%" y="159.50">crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (3,886 samples, 64.87%)</title><rect x="28.5643%" y="133" width="64.8748%" height="15" fill="rgb(238,117,24)" fg:x="1711" fg:w="3886"/><text x="28.8143%" y="143.50">crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position</text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (11 samples, 0.18%)</title><rect x="93.5559%" y="165" width="0.1836%" height="15" fill="rgb(242,26,26)" fg:x="5604" fg:w="11"/><text x="93.8059%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (22 samples, 0.37%)</title><rect x="93.4391%" y="181" width="0.3673%" height="15" fill="rgb(221,92,48)" fg:x="5597" fg:w="22"/><text x="93.6891%" y="191.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (4 samples, 0.07%)</title><rect x="93.7396%" y="165" width="0.0668%" height="15" fill="rgb(209,209,32)" fg:x="5615" fg:w="4"/><text x="93.9896%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4,425 samples, 73.87%)</title><rect x="19.9833%" y="197" width="73.8731%" height="15" fill="rgb(221,70,22)" fg:x="1197" fg:w="4425"/><text x="20.2333%" y="207.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (3 samples, 0.05%)</title><rect x="93.8063%" y="181" width="0.0501%" height="15" fill="rgb(248,145,5)" fg:x="5619" fg:w="3"/><text x="94.0563%" y="191.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="94.0401%" y="181" width="0.0167%" height="15" fill="rgb(226,116,26)" fg:x="5633" fg:w="1"/><text x="94.2901%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (15 samples, 0.25%)</title><rect x="93.8564%" y="197" width="0.2504%" height="15" fill="rgb(244,5,17)" fg:x="5622" fg:w="15"/><text x="94.1064%" y="207.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (3 samples, 0.05%)</title><rect x="94.0568%" y="181" width="0.0501%" height="15" fill="rgb(252,159,33)" fg:x="5634" fg:w="3"/><text x="94.3068%" y="191.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (110 samples, 1.84%)</title><rect x="94.2404%" y="181" width="1.8364%" height="15" fill="rgb(206,71,0)" fg:x="5645" fg:w="110"/><text x="94.4904%" y="191.50">&lt;..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (20 samples, 0.33%)</title><rect x="95.7429%" y="165" width="0.3339%" height="15" fill="rgb(233,118,54)" fg:x="5735" fg:w="20"/><text x="95.9929%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Trailer::addr_of_owned (2 samples, 0.03%)</title><rect x="96.0768%" y="181" width="0.0334%" height="15" fill="rgb(234,83,48)" fg:x="5755" fg:w="2"/><text x="96.3268%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join (1 samples, 0.02%)</title><rect x="96.1102%" y="181" width="0.0167%" height="15" fill="rgb(228,3,54)" fg:x="5757" fg:w="1"/><text x="96.3602%" y="191.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (21 samples, 0.35%)</title><rect x="96.1269%" y="181" width="0.3506%" height="15" fill="rgb(226,155,13)" fg:x="5758" fg:w="21"/><text x="96.3769%" y="191.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (3 samples, 0.05%)</title><rect x="96.4775%" y="181" width="0.0501%" height="15" fill="rgb(241,28,37)" fg:x="5779" fg:w="3"/><text x="96.7275%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (152 samples, 2.54%)</title><rect x="94.1068%" y="197" width="2.5376%" height="15" fill="rgb(233,93,10)" fg:x="5637" fg:w="152"/><text x="94.3568%" y="207.50">to..</text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (7 samples, 0.12%)</title><rect x="96.5275%" y="181" width="0.1169%" height="15" fill="rgb(225,113,19)" fg:x="5782" fg:w="7"/><text x="96.7775%" y="191.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (5 samples, 0.08%)</title><rect x="96.6444%" y="197" width="0.0835%" height="15" fill="rgb(241,2,18)" fg:x="5789" fg:w="5"/><text x="96.8944%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,795 samples, 96.74%)</title><rect x="0.0000%" y="341" width="96.7446%" height="15" fill="rgb(228,207,21)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,795 samples, 96.74%)</title><rect x="0.0000%" y="325" width="96.7446%" height="15" fill="rgb(213,211,35)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (5,795 samples, 96.74%)</title><rect x="0.0000%" y="309" width="96.7446%" height="15" fill="rgb(209,83,10)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="319.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (5,795 samples, 96.74%)</title><rect x="0.0000%" y="293" width="96.7446%" height="15" fill="rgb(209,164,1)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="303.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (5,795 samples, 96.74%)</title><rect x="0.0000%" y="277" width="96.7446%" height="15" fill="rgb(213,184,43)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="287.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (5,795 samples, 96.74%)</title><rect x="0.0000%" y="261" width="96.7446%" height="15" fill="rgb(231,61,34)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="271.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>tokio::runtime::context::set_scheduler (5,795 samples, 96.74%)</title><rect x="0.0000%" y="245" width="96.7446%" height="15" fill="rgb(235,75,3)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="255.50">tokio::runtime::context::set_scheduler</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (5,795 samples, 96.74%)</title><rect x="0.0000%" y="229" width="96.7446%" height="15" fill="rgb(220,106,47)" fg:x="0" fg:w="5795"/><text x="0.2500%" y="239.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4,608 samples, 76.93%)</title><rect x="19.8164%" y="213" width="76.9282%" height="15" fill="rgb(210,196,33)" fg:x="1187" fg:w="4608"/><text x="20.0664%" y="223.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::waker::raw_waker (1 samples, 0.02%)</title><rect x="96.7279%" y="197" width="0.0167%" height="15" fill="rgb(229,154,42)" fg:x="5794" fg:w="1"/><text x="96.9779%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.03%)</title><rect x="96.7613%" y="197" width="0.0334%" height="15" fill="rgb(228,114,26)" fg:x="5796" fg:w="2"/><text x="97.0113%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.22%)</title><rect x="96.7446%" y="213" width="0.2170%" height="15" fill="rgb(208,144,1)" fg:x="5795" fg:w="13"/><text x="96.9946%" y="223.50"></text></g><g><title>tokio::task::spawn::spawn (10 samples, 0.17%)</title><rect x="96.7947%" y="197" width="0.1669%" height="15" fill="rgb(239,112,37)" fg:x="5798" fg:w="10"/><text x="97.0447%" y="207.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (9 samples, 0.15%)</title><rect x="96.8114%" y="181" width="0.1503%" height="15" fill="rgb(210,96,50)" fg:x="5799" fg:w="9"/><text x="97.0614%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (9 samples, 0.15%)</title><rect x="96.8114%" y="165" width="0.1503%" height="15" fill="rgb(222,178,2)" fg:x="5799" fg:w="9"/><text x="97.0614%" y="175.50"></text></g><g><title>__rdl_alloc (5 samples, 0.08%)</title><rect x="96.8781%" y="149" width="0.0835%" height="15" fill="rgb(226,74,18)" fg:x="5803" fg:w="5"/><text x="97.1281%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.08%)</title><rect x="96.8781%" y="133" width="0.0835%" height="15" fill="rgb(225,67,54)" fg:x="5803" fg:w="5"/><text x="97.1281%" y="143.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (5 samples, 0.08%)</title><rect x="96.8781%" y="117" width="0.0835%" height="15" fill="rgb(251,92,32)" fg:x="5803" fg:w="5"/><text x="97.1281%" y="127.50"></text></g><g><title>posix_memalign (5 samples, 0.08%)</title><rect x="96.8781%" y="101" width="0.0835%" height="15" fill="rgb(228,149,22)" fg:x="5803" fg:w="5"/><text x="97.1281%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.10%)</title><rect x="96.9616%" y="213" width="0.1002%" height="15" fill="rgb(243,54,13)" fg:x="5808" fg:w="6"/><text x="97.2116%" y="223.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (6 samples, 0.10%)</title><rect x="96.9616%" y="197" width="0.1002%" height="15" fill="rgb(243,180,28)" fg:x="5808" fg:w="6"/><text x="97.2116%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.05%)</title><rect x="97.0117%" y="181" width="0.0501%" height="15" fill="rgb(208,167,24)" fg:x="5811" fg:w="3"/><text x="97.2617%" y="191.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.15%)</title><rect x="97.0618%" y="181" width="0.1503%" height="15" fill="rgb(245,73,45)" fg:x="5814" fg:w="9"/><text x="97.3118%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (3 samples, 0.05%)</title><rect x="97.1619%" y="165" width="0.0501%" height="15" fill="rgb(237,203,48)" fg:x="5820" fg:w="3"/><text x="97.4119%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.02%)</title><rect x="97.1953%" y="149" width="0.0167%" height="15" fill="rgb(211,197,16)" fg:x="5822" fg:w="1"/><text x="97.4453%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (1 samples, 0.02%)</title><rect x="97.1953%" y="133" width="0.0167%" height="15" fill="rgb(243,99,51)" fg:x="5822" fg:w="1"/><text x="97.4453%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt; (4 samples, 0.07%)</title><rect x="97.2120%" y="181" width="0.0668%" height="15" fill="rgb(215,123,29)" fg:x="5823" fg:w="4"/><text x="97.4620%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.03%)</title><rect x="97.2454%" y="165" width="0.0334%" height="15" fill="rgb(239,186,37)" fg:x="5825" fg:w="2"/><text x="97.4954%" y="175.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (33 samples, 0.55%)</title><rect x="96.7446%" y="229" width="0.5509%" height="15" fill="rgb(252,136,39)" fg:x="5795" fg:w="33"/><text x="96.9946%" y="239.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (14 samples, 0.23%)</title><rect x="97.0618%" y="213" width="0.2337%" height="15" fill="rgb(223,213,32)" fg:x="5814" fg:w="14"/><text x="97.3118%" y="223.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 0.23%)</title><rect x="97.0618%" y="197" width="0.2337%" height="15" fill="rgb(233,115,5)" fg:x="5814" fg:w="14"/><text x="97.3118%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::ArcInner&lt;futures_util::stream::futures_unordered::ready_to_run_queue::ReadyToRunQueue&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="97.2788%" y="181" width="0.0167%" height="15" fill="rgb(207,226,44)" fg:x="5827" fg:w="1"/><text x="97.5288%" y="191.50"></text></g><g><title>chrono::offset::utc::Utc::now (2 samples, 0.03%)</title><rect x="97.3456%" y="181" width="0.0334%" height="15" fill="rgb(208,126,0)" fg:x="5831" fg:w="2"/><text x="97.5956%" y="191.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.03%)</title><rect x="97.3456%" y="165" width="0.0334%" height="15" fill="rgb(244,66,21)" fg:x="5831" fg:w="2"/><text x="97.5956%" y="175.50"></text></g><g><title>clock_gettime (2 samples, 0.03%)</title><rect x="97.3456%" y="149" width="0.0334%" height="15" fill="rgb(222,97,12)" fg:x="5831" fg:w="2"/><text x="97.5956%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2 samples, 0.03%)</title><rect x="97.4124%" y="165" width="0.0334%" height="15" fill="rgb(219,213,19)" fg:x="5835" fg:w="2"/><text x="97.6624%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.03%)</title><rect x="97.4124%" y="149" width="0.0334%" height="15" fill="rgb(252,169,30)" fg:x="5835" fg:w="2"/><text x="97.6624%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="97.4124%" y="133" width="0.0334%" height="15" fill="rgb(206,32,51)" fg:x="5835" fg:w="2"/><text x="97.6624%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.03%)</title><rect x="97.4124%" y="117" width="0.0334%" height="15" fill="rgb(250,172,42)" fg:x="5835" fg:w="2"/><text x="97.6624%" y="127.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (2 samples, 0.03%)</title><rect x="97.4457%" y="165" width="0.0334%" height="15" fill="rgb(209,34,43)" fg:x="5837" fg:w="2"/><text x="97.6957%" y="175.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (1 samples, 0.02%)</title><rect x="97.4624%" y="149" width="0.0167%" height="15" fill="rgb(223,11,35)" fg:x="5838" fg:w="1"/><text x="97.7124%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.03%)</title><rect x="97.5125%" y="149" width="0.0334%" height="15" fill="rgb(251,219,26)" fg:x="5841" fg:w="2"/><text x="97.7625%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.07%)</title><rect x="97.5459%" y="149" width="0.0668%" height="15" fill="rgb(231,119,3)" fg:x="5843" fg:w="4"/><text x="97.7959%" y="159.50"></text></g><g><title>ratelimit_benchmark::benchmark_ratelimiter2_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (153 samples, 2.55%)</title><rect x="97.2955%" y="197" width="2.5543%" height="15" fill="rgb(216,97,11)" fg:x="5828" fg:w="153"/><text x="97.5455%" y="207.50">ra..</text></g><g><title>ratelimit::version2::RateLimiter2::ratelimit2 (148 samples, 2.47%)</title><rect x="97.3790%" y="181" width="2.4708%" height="15" fill="rgb(223,59,9)" fg:x="5833" fg:w="148"/><text x="97.6290%" y="191.50">ra..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (142 samples, 2.37%)</title><rect x="97.4791%" y="165" width="2.3706%" height="15" fill="rgb(233,93,31)" fg:x="5839" fg:w="142"/><text x="97.7291%" y="175.50">cr..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (134 samples, 2.24%)</title><rect x="97.6127%" y="149" width="2.2371%" height="15" fill="rgb(239,81,33)" fg:x="5847" fg:w="134"/><text x="97.8627%" y="159.50">c..</text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="99.8497%" y="181" width="0.0334%" height="15" fill="rgb(213,120,34)" fg:x="5981" fg:w="2"/><text x="100.0997%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (156 samples, 2.60%)</title><rect x="97.2955%" y="213" width="2.6043%" height="15" fill="rgb(243,49,53)" fg:x="5828" fg:w="156"/><text x="97.5455%" y="223.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (3 samples, 0.05%)</title><rect x="99.8497%" y="197" width="0.0501%" height="15" fill="rgb(247,216,33)" fg:x="5981" fg:w="3"/><text x="100.0997%" y="207.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.02%)</title><rect x="99.8831%" y="181" width="0.0167%" height="15" fill="rgb(226,26,14)" fg:x="5983" fg:w="1"/><text x="100.1331%" y="191.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (3 samples, 0.05%)</title><rect x="99.8998%" y="197" width="0.0501%" height="15" fill="rgb(215,49,53)" fg:x="5984" fg:w="3"/><text x="100.1498%" y="207.50"></text></g><g><title>all (5,990 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(245,162,40)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="655.50"></text></g><g><title>ratelimit_bench (5,990 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(229,68,17)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="639.50">ratelimit_bench</text></g><g><title>_start (5,990 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(213,182,10)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="623.50">_start</text></g><g><title>__libc_start_main (5,990 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(245,125,30)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="607.50">__libc_start_main</text></g><g><title>main (5,990 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(232,202,2)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (5,990 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(237,140,51)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,990 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(236,157,25)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,990 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(219,209,0)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,990 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(240,116,54)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,990 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(216,10,36)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,990 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(222,72,44)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,990 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(232,159,9)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,990 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(210,39,32)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,990 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(216,194,45)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,990 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(218,18,35)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,990 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(207,83,51)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ratelimit_benchmark::main (5,990 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(225,63,43)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="399.50">ratelimit_benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (5,990 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(207,57,36)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="383.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (5,990 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(216,99,33)" fg:x="0" fg:w="5990"/><text x="0.2500%" y="367.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (195 samples, 3.26%)</title><rect x="96.7446%" y="341" width="3.2554%" height="15" fill="rgb(225,42,16)" fg:x="5795" fg:w="195"/><text x="96.9946%" y="351.50">&lt;cr..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (195 samples, 3.26%)</title><rect x="96.7446%" y="325" width="3.2554%" height="15" fill="rgb(220,201,45)" fg:x="5795" fg:w="195"/><text x="96.9946%" y="335.50">cri..</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (195 samples, 3.26%)</title><rect x="96.7446%" y="309" width="3.2554%" height="15" fill="rgb(225,33,4)" fg:x="5795" fg:w="195"/><text x="96.9946%" y="319.50">&lt;to..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (195 samples, 3.26%)</title><rect x="96.7446%" y="293" width="3.2554%" height="15" fill="rgb(224,33,50)" fg:x="5795" fg:w="195"/><text x="96.9946%" y="303.50">tok..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (195 samples, 3.26%)</title><rect x="96.7446%" y="277" width="3.2554%" height="15" fill="rgb(246,198,51)" fg:x="5795" fg:w="195"/><text x="96.9946%" y="287.50">tok..</text></g><g><title>tokio::runtime::context::set_scheduler (195 samples, 3.26%)</title><rect x="96.7446%" y="261" width="3.2554%" height="15" fill="rgb(205,22,4)" fg:x="5795" fg:w="195"/><text x="96.9946%" y="271.50">tok..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (195 samples, 3.26%)</title><rect x="96.7446%" y="245" width="3.2554%" height="15" fill="rgb(206,3,8)" fg:x="5795" fg:w="195"/><text x="96.9946%" y="255.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (162 samples, 2.70%)</title><rect x="97.2955%" y="229" width="2.7045%" height="15" fill="rgb(251,23,15)" fg:x="5828" fg:w="162"/><text x="97.5455%" y="239.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (6 samples, 0.10%)</title><rect x="99.8998%" y="213" width="0.1002%" height="15" fill="rgb(252,88,28)" fg:x="5984" fg:w="6"/><text x="100.1498%" y="223.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (3 samples, 0.05%)</title><rect x="99.9499%" y="197" width="0.0501%" height="15" fill="rgb(212,127,14)" fg:x="5987" fg:w="3"/><text x="100.1999%" y="207.50"></text></g></svg></svg>