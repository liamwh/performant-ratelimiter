<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="6129"><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="3.4100%" y="69" width="0.0163%" height="15" fill="rgb(227,0,7)" fg:x="209" fg:w="1"/><text x="3.6600%" y="79.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="3.4100%" y="53" width="0.0163%" height="15" fill="rgb(217,0,24)" fg:x="209" fg:w="1"/><text x="3.6600%" y="63.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (132 samples, 2.15%)</title><rect x="3.3937%" y="85" width="2.1537%" height="15" fill="rgb(221,193,54)" fg:x="208" fg:w="132"/><text x="3.6437%" y="95.50">p..</text></g><g><title>syscall (130 samples, 2.12%)</title><rect x="3.4263%" y="69" width="2.1211%" height="15" fill="rgb(248,212,6)" fg:x="210" fg:w="130"/><text x="3.6763%" y="79.50">s..</text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.03%)</title><rect x="5.5963%" y="69" width="0.0326%" height="15" fill="rgb(208,68,35)" fg:x="343" fg:w="2"/><text x="5.8463%" y="79.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="5.6127%" y="53" width="0.0163%" height="15" fill="rgb(232,128,0)" fg:x="344" fg:w="1"/><text x="5.8627%" y="63.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="5.6127%" y="37" width="0.0163%" height="15" fill="rgb(207,160,47)" fg:x="344" fg:w="1"/><text x="5.8627%" y="47.50"></text></g><g><title>syscall (26 samples, 0.42%)</title><rect x="5.6290%" y="69" width="0.4242%" height="15" fill="rgb(228,23,34)" fg:x="345" fg:w="26"/><text x="5.8790%" y="79.50"></text></g><g><title>sched_yield (8 samples, 0.13%)</title><rect x="6.7874%" y="37" width="0.1305%" height="15" fill="rgb(218,30,26)" fg:x="416" fg:w="8"/><text x="7.0374%" y="47.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (90 samples, 1.47%)</title><rect x="5.5474%" y="85" width="1.4684%" height="15" fill="rgb(220,122,19)" fg:x="340" fg:w="90"/><text x="5.7974%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (59 samples, 0.96%)</title><rect x="6.0532%" y="69" width="0.9626%" height="15" fill="rgb(250,228,42)" fg:x="371" fg:w="59"/><text x="6.3032%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (26 samples, 0.42%)</title><rect x="6.5916%" y="53" width="0.4242%" height="15" fill="rgb(240,193,28)" fg:x="404" fg:w="26"/><text x="6.8416%" y="63.50"></text></g><g><title>syscall (6 samples, 0.10%)</title><rect x="6.9179%" y="37" width="0.0979%" height="15" fill="rgb(216,20,37)" fg:x="424" fg:w="6"/><text x="7.1679%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.02%)</title><rect x="7.0158%" y="85" width="0.0163%" height="15" fill="rgb(206,188,39)" fg:x="430" fg:w="1"/><text x="7.2658%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (342 samples, 5.58%)</title><rect x="2.7248%" y="117" width="5.5800%" height="15" fill="rgb(217,207,13)" fg:x="167" fg:w="342"/><text x="2.9748%" y="127.50">tokio::..</text></g><g><title>tokio::runtime::context::with_scheduler (340 samples, 5.55%)</title><rect x="2.7574%" y="101" width="5.5474%" height="15" fill="rgb(231,73,38)" fg:x="169" fg:w="340"/><text x="3.0074%" y="111.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (78 samples, 1.27%)</title><rect x="7.0321%" y="85" width="1.2726%" height="15" fill="rgb(225,20,46)" fg:x="431" fg:w="78"/><text x="7.2821%" y="95.50"></text></g><g><title>syscall (15 samples, 0.24%)</title><rect x="8.0600%" y="69" width="0.2447%" height="15" fill="rgb(210,31,41)" fg:x="494" fg:w="15"/><text x="8.3100%" y="79.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="8.9411%" y="101" width="0.0163%" height="15" fill="rgb(221,200,47)" fg:x="548" fg:w="1"/><text x="9.1911%" y="111.50"></text></g><g><title>__rdl_alloc (206 samples, 3.36%)</title><rect x="8.9574%" y="101" width="3.3611%" height="15" fill="rgb(226,26,5)" fg:x="549" fg:w="206"/><text x="9.2074%" y="111.50">__r..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (206 samples, 3.36%)</title><rect x="8.9574%" y="85" width="3.3611%" height="15" fill="rgb(249,33,26)" fg:x="549" fg:w="206"/><text x="9.2074%" y="95.50">std..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (206 samples, 3.36%)</title><rect x="8.9574%" y="69" width="3.3611%" height="15" fill="rgb(235,183,28)" fg:x="549" fg:w="206"/><text x="9.2074%" y="79.50">std..</text></g><g><title>posix_memalign (206 samples, 3.36%)</title><rect x="8.9574%" y="53" width="3.3611%" height="15" fill="rgb(221,5,38)" fg:x="549" fg:w="206"/><text x="9.2074%" y="63.50">pos..</text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (248 samples, 4.05%)</title><rect x="8.3048%" y="117" width="4.0463%" height="15" fill="rgb(247,18,42)" fg:x="509" fg:w="248"/><text x="8.5548%" y="127.50">toki..</text></g><g><title>tokio::runtime::task::core::Trailer::new (2 samples, 0.03%)</title><rect x="12.3185%" y="101" width="0.0326%" height="15" fill="rgb(241,131,45)" fg:x="755" fg:w="2"/><text x="12.5685%" y="111.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="13.2159%" y="101" width="0.0163%" height="15" fill="rgb(249,31,29)" fg:x="810" fg:w="1"/><text x="13.4659%" y="111.50"></text></g><g><title>tokio::runtime::task::core::Header::set_owner_id (1 samples, 0.02%)</title><rect x="13.2322%" y="101" width="0.0163%" height="15" fill="rgb(225,111,53)" fg:x="811" fg:w="1"/><text x="13.4822%" y="111.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::header (1 samples, 0.02%)</title><rect x="13.2485%" y="101" width="0.0163%" height="15" fill="rgb(238,160,17)" fg:x="812" fg:w="1"/><text x="13.4985%" y="111.50"></text></g><g><title>&lt;tokio::runtime::task::raw::RawTask as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="13.4280%" y="85" width="0.0489%" height="15" fill="rgb(214,148,48)" fg:x="823" fg:w="3"/><text x="13.6780%" y="95.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (80 samples, 1.31%)</title><rect x="12.3511%" y="117" width="1.3053%" height="15" fill="rgb(232,36,49)" fg:x="757" fg:w="80"/><text x="12.6011%" y="127.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (24 samples, 0.39%)</title><rect x="13.2648%" y="101" width="0.3916%" height="15" fill="rgb(209,103,24)" fg:x="813" fg:w="24"/><text x="13.5148%" y="111.50"></text></g><g><title>tokio::runtime::task::core::Header::get_trailer (11 samples, 0.18%)</title><rect x="13.4769%" y="85" width="0.1795%" height="15" fill="rgb(229,88,8)" fg:x="826" fg:w="11"/><text x="13.7269%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (724 samples, 11.81%)</title><rect x="1.8926%" y="133" width="11.8127%" height="15" fill="rgb(213,181,19)" fg:x="116" fg:w="724"/><text x="2.1426%" y="143.50">tokio::runtime::sc..</text></g><g><title>tokio::runtime::task::state::State::new (3 samples, 0.05%)</title><rect x="13.6564%" y="117" width="0.0489%" height="15" fill="rgb(254,191,54)" fg:x="837" fg:w="3"/><text x="13.9064%" y="127.50"></text></g><g><title>tokio::runtime::task::id::Id::as_u64 (3 samples, 0.05%)</title><rect x="13.7053%" y="133" width="0.0489%" height="15" fill="rgb(241,83,37)" fg:x="840" fg:w="3"/><text x="13.9553%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (860 samples, 14.03%)</title><rect x="0.0326%" y="165" width="14.0317%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="860"/><text x="0.2826%" y="175.50">&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>tokio::task::spawn::spawn (780 samples, 12.73%)</title><rect x="1.3379%" y="149" width="12.7264%" height="15" fill="rgb(226,3,54)" fg:x="82" fg:w="780"/><text x="1.5879%" y="159.50">tokio::task::spawn:..</text></g><g><title>tokio::runtime::task::id::Id::next (19 samples, 0.31%)</title><rect x="13.7543%" y="133" width="0.3100%" height="15" fill="rgb(245,192,40)" fg:x="843" fg:w="19"/><text x="14.0043%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (180 samples, 2.94%)</title><rect x="14.0643%" y="165" width="2.9369%" height="15" fill="rgb(238,167,29)" fg:x="862" fg:w="180"/><text x="14.3143%" y="175.50">&lt;c..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (172 samples, 2.81%)</title><rect x="14.1948%" y="149" width="2.8063%" height="15" fill="rgb(232,182,51)" fg:x="870" fg:w="172"/><text x="14.4448%" y="159.50">fu..</text></g><g><title>__libc_malloc (65 samples, 1.06%)</title><rect x="15.9406%" y="133" width="1.0605%" height="15" fill="rgb(231,60,39)" fg:x="977" fg:w="65"/><text x="16.1906%" y="143.50"></text></g><g><title>&lt;futures_util::future::try_join_all::TryJoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="17.0011%" y="165" width="0.0163%" height="15" fill="rgb(208,69,12)" fg:x="1042" fg:w="1"/><text x="17.2511%" y="175.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (2 samples, 0.03%)</title><rect x="20.9006%" y="117" width="0.0326%" height="15" fill="rgb(235,93,37)" fg:x="1281" fg:w="2"/><text x="21.1506%" y="127.50"></text></g><g><title>tokio::runtime::park::wake (1 samples, 0.02%)</title><rect x="20.9170%" y="101" width="0.0163%" height="15" fill="rgb(213,116,39)" fg:x="1282" fg:w="1"/><text x="21.1670%" y="111.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="20.9333%" y="117" width="0.0489%" height="15" fill="rgb(222,207,29)" fg:x="1283" fg:w="3"/><text x="21.1833%" y="127.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (4 samples, 0.07%)</title><rect x="20.9822%" y="117" width="0.0653%" height="15" fill="rgb(206,96,30)" fg:x="1286" fg:w="4"/><text x="21.2322%" y="127.50"></text></g><g><title>tokio::runtime::coop::RestoreOnPending::made_progress (1 samples, 0.02%)</title><rect x="21.0475%" y="117" width="0.0163%" height="15" fill="rgb(218,138,4)" fg:x="1290" fg:w="1"/><text x="21.2975%" y="127.50"></text></g><g><title>futures_task::waker::clone_arc_raw (2 samples, 0.03%)</title><rect x="21.8959%" y="85" width="0.0326%" height="15" fill="rgb(250,191,14)" fg:x="1342" fg:w="2"/><text x="22.1459%" y="95.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (69 samples, 1.13%)</title><rect x="21.0638%" y="117" width="1.1258%" height="15" fill="rgb(239,60,40)" fg:x="1291" fg:w="69"/><text x="21.3138%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (22 samples, 0.36%)</title><rect x="21.8306%" y="101" width="0.3589%" height="15" fill="rgb(206,27,48)" fg:x="1338" fg:w="22"/><text x="22.0806%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (16 samples, 0.26%)</title><rect x="21.9285%" y="85" width="0.2611%" height="15" fill="rgb(225,35,8)" fg:x="1344" fg:w="16"/><text x="22.1785%" y="95.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (187 samples, 3.05%)</title><rect x="19.2364%" y="133" width="3.0511%" height="15" fill="rgb(250,213,24)" fg:x="1179" fg:w="187"/><text x="19.4864%" y="143.50">&lt;to..</text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (6 samples, 0.10%)</title><rect x="22.1896%" y="117" width="0.0979%" height="15" fill="rgb(247,123,22)" fg:x="1360" fg:w="6"/><text x="22.4396%" y="127.50"></text></g><g><title>__libc_free (90 samples, 1.47%)</title><rect x="23.2828%" y="117" width="1.4684%" height="15" fill="rgb(231,138,38)" fg:x="1427" fg:w="90"/><text x="23.5328%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (30 samples, 0.49%)</title><rect x="24.7512%" y="117" width="0.4895%" height="15" fill="rgb(231,145,46)" fg:x="1517" fg:w="30"/><text x="25.0012%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (24 samples, 0.39%)</title><rect x="25.2407%" y="117" width="0.3916%" height="15" fill="rgb(251,118,11)" fg:x="1547" fg:w="24"/><text x="25.4907%" y="127.50"></text></g><g><title>futures_task::waker::drop_arc_raw (12 samples, 0.20%)</title><rect x="25.4364%" y="101" width="0.1958%" height="15" fill="rgb(217,147,25)" fg:x="1559" fg:w="12"/><text x="25.6864%" y="111.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (18 samples, 0.29%)</title><rect x="25.8443%" y="85" width="0.2937%" height="15" fill="rgb(247,81,37)" fg:x="1584" fg:w="18"/><text x="26.0943%" y="95.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (28 samples, 0.46%)</title><rect x="25.7301%" y="101" width="0.4568%" height="15" fill="rgb(209,12,38)" fg:x="1577" fg:w="28"/><text x="25.9801%" y="111.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (3 samples, 0.05%)</title><rect x="26.1380%" y="85" width="0.0489%" height="15" fill="rgb(227,1,9)" fg:x="1602" fg:w="3"/><text x="26.3880%" y="95.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (45 samples, 0.73%)</title><rect x="25.6322%" y="117" width="0.7342%" height="15" fill="rgb(248,47,43)" fg:x="1571" fg:w="45"/><text x="25.8822%" y="127.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (11 samples, 0.18%)</title><rect x="26.1870%" y="101" width="0.1795%" height="15" fill="rgb(221,10,30)" fg:x="1605" fg:w="11"/><text x="26.4370%" y="111.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::drop_join_handle_slow (2 samples, 0.03%)</title><rect x="26.3665%" y="117" width="0.0326%" height="15" fill="rgb(210,229,1)" fg:x="1616" fg:w="2"/><text x="26.6165%" y="127.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (18 samples, 0.29%)</title><rect x="26.3991%" y="117" width="0.2937%" height="15" fill="rgb(222,148,37)" fg:x="1618" fg:w="18"/><text x="26.6491%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt; (273 samples, 4.45%)</title><rect x="22.2875%" y="133" width="4.4542%" height="15" fill="rgb(234,67,33)" fg:x="1366" fg:w="273"/><text x="22.5375%" y="143.50">core:..</text></g><g><title>tokio::runtime::task::state::State::transition_to_shutdown (3 samples, 0.05%)</title><rect x="26.6928%" y="117" width="0.0489%" height="15" fill="rgb(247,98,35)" fg:x="1636" fg:w="3"/><text x="26.9428%" y="127.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (55 samples, 0.90%)</title><rect x="26.7417%" y="133" width="0.8974%" height="15" fill="rgb(247,138,52)" fg:x="1639" fg:w="55"/><text x="26.9917%" y="143.50"></text></g><g><title>tokio::runtime::park::clone (16 samples, 0.26%)</title><rect x="27.3780%" y="117" width="0.2611%" height="15" fill="rgb(213,79,30)" fg:x="1678" fg:w="16"/><text x="27.6280%" y="127.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (603 samples, 9.84%)</title><rect x="17.8496%" y="149" width="9.8385%" height="15" fill="rgb(246,177,23)" fg:x="1094" fg:w="603"/><text x="18.0996%" y="159.50">&lt;futures_util:..</text></g><g><title>tokio::runtime::park::wake_by_ref (3 samples, 0.05%)</title><rect x="27.6391%" y="133" width="0.0489%" height="15" fill="rgb(230,62,27)" fg:x="1694" fg:w="3"/><text x="27.8891%" y="143.50"></text></g><g><title>alloc::collections::binary_heap::PeekMut&lt;T,A&gt;::pop (103 samples, 1.68%)</title><rect x="27.6880%" y="149" width="1.6805%" height="15" fill="rgb(216,154,8)" fg:x="1697" fg:w="103"/><text x="27.9380%" y="159.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (832 samples, 13.57%)</title><rect x="17.0175%" y="165" width="13.5748%" height="15" fill="rgb(244,35,45)" fg:x="1043" fg:w="832"/><text x="17.2675%" y="175.50">&lt;futures_util::stream..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (75 samples, 1.22%)</title><rect x="29.3686%" y="149" width="1.2237%" height="15" fill="rgb(251,115,12)" fg:x="1800" fg:w="75"/><text x="29.6186%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (75 samples, 1.22%)</title><rect x="29.3686%" y="133" width="1.2237%" height="15" fill="rgb(240,54,50)" fg:x="1800" fg:w="75"/><text x="29.6186%" y="143.50"></text></g><g><title>realloc (75 samples, 1.22%)</title><rect x="29.3686%" y="117" width="1.2237%" height="15" fill="rgb(233,84,52)" fg:x="1800" fg:w="75"/><text x="29.6186%" y="127.50"></text></g><g><title>__libc_free (89 samples, 1.45%)</title><rect x="30.5923%" y="165" width="1.4521%" height="15" fill="rgb(207,117,47)" fg:x="1875" fg:w="89"/><text x="30.8423%" y="175.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (1,964 samples, 32.04%)</title><rect x="0.0163%" y="181" width="32.0444%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="1964"/><text x="0.2663%" y="191.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closu..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::new (1 samples, 0.02%)</title><rect x="32.0444%" y="165" width="0.0163%" height="15" fill="rgb(209,38,44)" fg:x="1964" fg:w="1"/><text x="32.2944%" y="175.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park (1 samples, 0.02%)</title><rect x="32.0607%" y="181" width="0.0163%" height="15" fill="rgb(236,212,23)" fg:x="1965" fg:w="1"/><text x="32.3107%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,081 samples, 33.95%)</title><rect x="0.0000%" y="261" width="33.9533%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="2081"/><text x="0.2500%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::Spec..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,081 samples, 33.95%)</title><rect x="0.0000%" y="245" width="33.9533%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="2081"/><text x="0.2500%" y="255.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::tra..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (2,081 samples, 33.95%)</title><rect x="0.0000%" y="229" width="33.9533%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="2081"/><text x="0.2500%" y="239.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (2,081 samples, 33.95%)</title><rect x="0.0000%" y="213" width="33.9533%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="2081"/><text x="0.2500%" y="223.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_e..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (2,081 samples, 33.95%)</title><rect x="0.0000%" y="197" width="33.9533%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="2081"/><text x="0.2500%" y="207.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (115 samples, 1.88%)</title><rect x="32.0770%" y="181" width="1.8763%" height="15" fill="rgb(235,213,38)" fg:x="1966" fg:w="115"/><text x="32.3270%" y="191.50">t..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (112 samples, 1.83%)</title><rect x="32.1260%" y="165" width="1.8274%" height="15" fill="rgb(237,122,38)" fg:x="1969" fg:w="112"/><text x="32.3760%" y="175.50">p..</text></g><g><title>syscall (98 samples, 1.60%)</title><rect x="32.3544%" y="149" width="1.5990%" height="15" fill="rgb(244,218,35)" fg:x="1983" fg:w="98"/><text x="32.6044%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.02%)</title><rect x="33.9860%" y="165" width="0.0163%" height="15" fill="rgb(240,68,47)" fg:x="2083" fg:w="1"/><text x="34.2360%" y="175.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="34.0839%" y="85" width="0.0163%" height="15" fill="rgb(210,16,53)" fg:x="2089" fg:w="1"/><text x="34.3339%" y="95.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="34.0839%" y="69" width="0.0163%" height="15" fill="rgb(235,124,12)" fg:x="2089" fg:w="1"/><text x="34.3339%" y="79.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.07%)</title><rect x="34.0839%" y="101" width="0.0653%" height="15" fill="rgb(224,169,11)" fg:x="2089" fg:w="4"/><text x="34.3339%" y="111.50"></text></g><g><title>syscall (3 samples, 0.05%)</title><rect x="34.1002%" y="85" width="0.0489%" height="15" fill="rgb(250,166,2)" fg:x="2090" fg:w="3"/><text x="34.3502%" y="95.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (4 samples, 0.07%)</title><rect x="34.1491%" y="101" width="0.0653%" height="15" fill="rgb(242,216,29)" fg:x="2093" fg:w="4"/><text x="34.3991%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (4 samples, 0.07%)</title><rect x="34.1491%" y="85" width="0.0653%" height="15" fill="rgb(230,116,27)" fg:x="2093" fg:w="4"/><text x="34.3991%" y="95.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.02%)</title><rect x="34.1981%" y="69" width="0.0163%" height="15" fill="rgb(228,99,48)" fg:x="2096" fg:w="1"/><text x="34.4481%" y="79.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="34.1981%" y="53" width="0.0163%" height="15" fill="rgb(253,11,6)" fg:x="2096" fg:w="1"/><text x="34.4481%" y="63.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (14 samples, 0.23%)</title><rect x="34.0512%" y="133" width="0.2284%" height="15" fill="rgb(247,143,39)" fg:x="2087" fg:w="14"/><text x="34.3012%" y="143.50"></text></g><g><title>tokio::runtime::context::with_scheduler (13 samples, 0.21%)</title><rect x="34.0675%" y="117" width="0.2121%" height="15" fill="rgb(236,97,10)" fg:x="2088" fg:w="13"/><text x="34.3175%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (4 samples, 0.07%)</title><rect x="34.2144%" y="101" width="0.0653%" height="15" fill="rgb(233,208,19)" fg:x="2097" fg:w="4"/><text x="34.4644%" y="111.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (9 samples, 0.15%)</title><rect x="34.2797%" y="133" width="0.1468%" height="15" fill="rgb(216,164,2)" fg:x="2101" fg:w="9"/><text x="34.5297%" y="143.50"></text></g><g><title>__rdl_alloc (7 samples, 0.11%)</title><rect x="34.3123%" y="117" width="0.1142%" height="15" fill="rgb(220,129,5)" fg:x="2103" fg:w="7"/><text x="34.5623%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.11%)</title><rect x="34.3123%" y="101" width="0.1142%" height="15" fill="rgb(242,17,10)" fg:x="2103" fg:w="7"/><text x="34.5623%" y="111.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (7 samples, 0.11%)</title><rect x="34.3123%" y="85" width="0.1142%" height="15" fill="rgb(242,107,0)" fg:x="2103" fg:w="7"/><text x="34.5623%" y="95.50"></text></g><g><title>posix_memalign (7 samples, 0.11%)</title><rect x="34.3123%" y="69" width="0.1142%" height="15" fill="rgb(251,28,31)" fg:x="2103" fg:w="7"/><text x="34.5623%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (28 samples, 0.46%)</title><rect x="34.0349%" y="149" width="0.4568%" height="15" fill="rgb(233,223,10)" fg:x="2086" fg:w="28"/><text x="34.2849%" y="159.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (4 samples, 0.07%)</title><rect x="34.4265%" y="133" width="0.0653%" height="15" fill="rgb(215,21,27)" fg:x="2110" fg:w="4"/><text x="34.6765%" y="143.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (1 samples, 0.02%)</title><rect x="34.4754%" y="117" width="0.0163%" height="15" fill="rgb(232,23,21)" fg:x="2113" fg:w="1"/><text x="34.7254%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 0.55%)</title><rect x="33.9533%" y="181" width="0.5547%" height="15" fill="rgb(244,5,23)" fg:x="2081" fg:w="34"/><text x="34.2033%" y="191.50"></text></g><g><title>tokio::task::spawn::spawn (31 samples, 0.51%)</title><rect x="34.0023%" y="165" width="0.5058%" height="15" fill="rgb(226,81,46)" fg:x="2084" fg:w="31"/><text x="34.2523%" y="175.50"></text></g><g><title>tokio::runtime::task::id::Id::next (1 samples, 0.02%)</title><rect x="34.4918%" y="149" width="0.0163%" height="15" fill="rgb(247,70,30)" fg:x="2114" fg:w="1"/><text x="34.7418%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.11%)</title><rect x="34.5081%" y="181" width="0.1142%" height="15" fill="rgb(212,68,19)" fg:x="2115" fg:w="7"/><text x="34.7581%" y="191.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (7 samples, 0.11%)</title><rect x="34.5081%" y="165" width="0.1142%" height="15" fill="rgb(240,187,13)" fg:x="2115" fg:w="7"/><text x="34.7581%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.03%)</title><rect x="34.5897%" y="149" width="0.0326%" height="15" fill="rgb(223,113,26)" fg:x="2120" fg:w="2"/><text x="34.8397%" y="159.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="34.7202%" y="149" width="0.0489%" height="15" fill="rgb(206,192,2)" fg:x="2128" fg:w="3"/><text x="34.9702%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1 samples, 0.02%)</title><rect x="34.7528%" y="133" width="0.0163%" height="15" fill="rgb(241,108,4)" fg:x="2130" fg:w="1"/><text x="35.0028%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.02%)</title><rect x="34.7528%" y="117" width="0.0163%" height="15" fill="rgb(247,173,49)" fg:x="2130" fg:w="1"/><text x="35.0028%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (1 samples, 0.02%)</title><rect x="34.7528%" y="101" width="0.0163%" height="15" fill="rgb(224,114,35)" fg:x="2130" fg:w="1"/><text x="35.0028%" y="111.50"></text></g><g><title>__libc_free (3 samples, 0.05%)</title><rect x="34.7854%" y="133" width="0.0489%" height="15" fill="rgb(245,159,27)" fg:x="2132" fg:w="3"/><text x="35.0354%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.03%)</title><rect x="34.8344%" y="133" width="0.0326%" height="15" fill="rgb(245,172,44)" fg:x="2135" fg:w="2"/><text x="35.0844%" y="143.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.02%)</title><rect x="34.8670%" y="117" width="0.0163%" height="15" fill="rgb(236,23,11)" fg:x="2137" fg:w="1"/><text x="35.1170%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="34.8670%" y="101" width="0.0163%" height="15" fill="rgb(205,117,38)" fg:x="2137" fg:w="1"/><text x="35.1170%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (2 samples, 0.03%)</title><rect x="34.8670%" y="133" width="0.0326%" height="15" fill="rgb(237,72,25)" fg:x="2137" fg:w="2"/><text x="35.1170%" y="143.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.02%)</title><rect x="34.8833%" y="117" width="0.0163%" height="15" fill="rgb(244,70,9)" fg:x="2138" fg:w="1"/><text x="35.1333%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt; (9 samples, 0.15%)</title><rect x="34.7691%" y="149" width="0.1468%" height="15" fill="rgb(217,125,39)" fg:x="2131" fg:w="9"/><text x="35.0191%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (1 samples, 0.02%)</title><rect x="34.8997%" y="133" width="0.0163%" height="15" fill="rgb(235,36,10)" fg:x="2139" fg:w="1"/><text x="35.1497%" y="143.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 0.33%)</title><rect x="34.6223%" y="165" width="0.3263%" height="15" fill="rgb(251,123,47)" fg:x="2122" fg:w="20"/><text x="34.8723%" y="175.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (2 samples, 0.03%)</title><rect x="34.9160%" y="149" width="0.0326%" height="15" fill="rgb(221,13,13)" fg:x="2140" fg:w="2"/><text x="35.1660%" y="159.50"></text></g><g><title>alloc::collections::binary_heap::PeekMut&lt;T,A&gt;::pop (9 samples, 0.15%)</title><rect x="34.9486%" y="165" width="0.1468%" height="15" fill="rgb(238,131,9)" fg:x="2142" fg:w="9"/><text x="35.1986%" y="175.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (31 samples, 0.51%)</title><rect x="34.6223%" y="181" width="0.5058%" height="15" fill="rgb(211,50,8)" fg:x="2122" fg:w="31"/><text x="34.8723%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.03%)</title><rect x="35.0954%" y="165" width="0.0326%" height="15" fill="rgb(245,182,24)" fg:x="2151" fg:w="2"/><text x="35.3454%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="35.0954%" y="149" width="0.0326%" height="15" fill="rgb(242,14,37)" fg:x="2151" fg:w="2"/><text x="35.3454%" y="159.50"></text></g><g><title>realloc (2 samples, 0.03%)</title><rect x="35.0954%" y="133" width="0.0326%" height="15" fill="rgb(246,228,12)" fg:x="2151" fg:w="2"/><text x="35.3454%" y="143.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (74 samples, 1.21%)</title><rect x="33.9533%" y="197" width="1.2074%" height="15" fill="rgb(213,55,15)" fg:x="2081" fg:w="74"/><text x="34.2033%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.03%)</title><rect x="35.1281%" y="181" width="0.0326%" height="15" fill="rgb(209,9,3)" fg:x="2153" fg:w="2"/><text x="35.3781%" y="191.50"></text></g><g><title>ratelimit_bench (2,156 samples, 35.18%)</title><rect x="0.0000%" y="549" width="35.1770%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="559.50">ratelimit_bench</text></g><g><title>_start (2,156 samples, 35.18%)</title><rect x="0.0000%" y="533" width="35.1770%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="543.50">_start</text></g><g><title>__libc_start_main (2,156 samples, 35.18%)</title><rect x="0.0000%" y="517" width="35.1770%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="527.50">__libc_start_main</text></g><g><title>main (2,156 samples, 35.18%)</title><rect x="0.0000%" y="501" width="35.1770%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (2,156 samples, 35.18%)</title><rect x="0.0000%" y="485" width="35.1770%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,156 samples, 35.18%)</title><rect x="0.0000%" y="469" width="35.1770%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,156 samples, 35.18%)</title><rect x="0.0000%" y="453" width="35.1770%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,156 samples, 35.18%)</title><rect x="0.0000%" y="437" width="35.1770%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,156 samples, 35.18%)</title><rect x="0.0000%" y="421" width="35.1770%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,156 samples, 35.18%)</title><rect x="0.0000%" y="405" width="35.1770%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,156 samples, 35.18%)</title><rect x="0.0000%" y="389" width="35.1770%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,156 samples, 35.18%)</title><rect x="0.0000%" y="373" width="35.1770%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,156 samples, 35.18%)</title><rect x="0.0000%" y="357" width="35.1770%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::Fn..</text></g><g><title>std::rt::lang_start::{{closure}} (2,156 samples, 35.18%)</title><rect x="0.0000%" y="341" width="35.1770%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,156 samples, 35.18%)</title><rect x="0.0000%" y="325" width="35.1770%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ratelimit_benchmark::main (2,156 samples, 35.18%)</title><rect x="0.0000%" y="309" width="35.1770%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="319.50">ratelimit_benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (2,156 samples, 35.18%)</title><rect x="0.0000%" y="293" width="35.1770%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="303.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with..</text></g><g><title>criterion::routine::Routine::profile (2,156 samples, 35.18%)</title><rect x="0.0000%" y="277" width="35.1770%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="2156"/><text x="0.2500%" y="287.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (75 samples, 1.22%)</title><rect x="33.9533%" y="261" width="1.2237%" height="15" fill="rgb(222,74,54)" fg:x="2081" fg:w="75"/><text x="34.2033%" y="271.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (75 samples, 1.22%)</title><rect x="33.9533%" y="245" width="1.2237%" height="15" fill="rgb(216,99,12)" fg:x="2081" fg:w="75"/><text x="34.2033%" y="255.50"></text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (75 samples, 1.22%)</title><rect x="33.9533%" y="229" width="1.2237%" height="15" fill="rgb(226,22,26)" fg:x="2081" fg:w="75"/><text x="34.2033%" y="239.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (75 samples, 1.22%)</title><rect x="33.9533%" y="213" width="1.2237%" height="15" fill="rgb(217,163,10)" fg:x="2081" fg:w="75"/><text x="34.2033%" y="223.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.02%)</title><rect x="35.1607%" y="197" width="0.0163%" height="15" fill="rgb(213,25,53)" fg:x="2155" fg:w="1"/><text x="35.4107%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.02%)</title><rect x="35.1607%" y="181" width="0.0163%" height="15" fill="rgb(252,105,26)" fg:x="2155" fg:w="1"/><text x="35.4107%" y="191.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="35.1607%" y="165" width="0.0163%" height="15" fill="rgb(220,39,43)" fg:x="2155" fg:w="1"/><text x="35.4107%" y="175.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="35.9765%" y="341" width="0.0163%" height="15" fill="rgb(229,68,48)" fg:x="2205" fg:w="1"/><text x="36.2265%" y="351.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.02%)</title><rect x="35.9765%" y="325" width="0.0163%" height="15" fill="rgb(252,8,32)" fg:x="2205" fg:w="1"/><text x="36.2265%" y="335.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.02%)</title><rect x="35.9765%" y="309" width="0.0163%" height="15" fill="rgb(223,20,43)" fg:x="2205" fg:w="1"/><text x="36.2265%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.02%)</title><rect x="35.9765%" y="293" width="0.0163%" height="15" fill="rgb(229,81,49)" fg:x="2205" fg:w="1"/><text x="36.2265%" y="303.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.02%)</title><rect x="35.9765%" y="277" width="0.0163%" height="15" fill="rgb(236,28,36)" fg:x="2205" fg:w="1"/><text x="36.2265%" y="287.50"></text></g><g><title>__floattidf (1 samples, 0.02%)</title><rect x="35.9928%" y="341" width="0.0163%" height="15" fill="rgb(249,185,26)" fg:x="2206" fg:w="1"/><text x="36.2428%" y="351.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (1 samples, 0.02%)</title><rect x="35.9928%" y="325" width="0.0163%" height="15" fill="rgb(249,174,33)" fg:x="2206" fg:w="1"/><text x="36.2428%" y="335.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (1 samples, 0.02%)</title><rect x="35.9928%" y="309" width="0.0163%" height="15" fill="rgb(233,201,37)" fg:x="2206" fg:w="1"/><text x="36.2428%" y="319.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (1 samples, 0.02%)</title><rect x="35.9928%" y="293" width="0.0163%" height="15" fill="rgb(221,78,26)" fg:x="2206" fg:w="1"/><text x="36.2428%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_all_slow (1 samples, 0.02%)</title><rect x="36.0091%" y="341" width="0.0163%" height="15" fill="rgb(250,127,30)" fg:x="2207" fg:w="1"/><text x="36.2591%" y="351.50"></text></g><g><title>sched_yield (5 samples, 0.08%)</title><rect x="36.1560%" y="325" width="0.0816%" height="15" fill="rgb(230,49,44)" fg:x="2216" fg:w="5"/><text x="36.4060%" y="335.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (19 samples, 0.31%)</title><rect x="36.0255%" y="341" width="0.3100%" height="15" fill="rgb(229,67,23)" fg:x="2208" fg:w="19"/><text x="36.2755%" y="351.50"></text></g><g><title>syscall (6 samples, 0.10%)</title><rect x="36.2376%" y="325" width="0.0979%" height="15" fill="rgb(249,83,47)" fg:x="2221" fg:w="6"/><text x="36.4876%" y="335.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.02%)</title><rect x="36.3355%" y="341" width="0.0163%" height="15" fill="rgb(215,43,3)" fg:x="2227" fg:w="1"/><text x="36.5855%" y="351.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="36.3355%" y="325" width="0.0163%" height="15" fill="rgb(238,154,13)" fg:x="2227" fg:w="1"/><text x="36.5855%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="36.3355%" y="309" width="0.0163%" height="15" fill="rgb(219,56,2)" fg:x="2227" fg:w="1"/><text x="36.5855%" y="319.50"></text></g><g><title>powf64 (11 samples, 0.18%)</title><rect x="36.3518%" y="341" width="0.1795%" height="15" fill="rgb(233,0,4)" fg:x="2228" fg:w="11"/><text x="36.6018%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.03%)</title><rect x="36.5312%" y="341" width="0.0326%" height="15" fill="rgb(235,30,7)" fg:x="2239" fg:w="2"/><text x="36.7812%" y="351.50"></text></g><g><title>clock_gettime (2 samples, 0.03%)</title><rect x="36.5312%" y="325" width="0.0326%" height="15" fill="rgb(250,79,13)" fg:x="2239" fg:w="2"/><text x="36.7812%" y="335.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="36.5639%" y="341" width="0.0163%" height="15" fill="rgb(211,146,34)" fg:x="2241" fg:w="1"/><text x="36.8139%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="36.5639%" y="325" width="0.0163%" height="15" fill="rgb(228,22,38)" fg:x="2241" fg:w="1"/><text x="36.8139%" y="335.50"></text></g><g><title>syscall (58 samples, 0.95%)</title><rect x="36.5802%" y="341" width="0.9463%" height="15" fill="rgb(235,168,5)" fg:x="2242" fg:w="58"/><text x="36.8302%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (55 samples, 0.90%)</title><rect x="37.5265%" y="341" width="0.8974%" height="15" fill="rgb(221,155,16)" fg:x="2300" fg:w="55"/><text x="37.7765%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.02%)</title><rect x="38.4239%" y="341" width="0.0163%" height="15" fill="rgb(215,215,53)" fg:x="2355" fg:w="1"/><text x="38.6739%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="38.4891%" y="325" width="0.0163%" height="15" fill="rgb(223,4,10)" fg:x="2359" fg:w="1"/><text x="38.7391%" y="335.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="38.4891%" y="309" width="0.0163%" height="15" fill="rgb(234,103,6)" fg:x="2359" fg:w="1"/><text x="38.7391%" y="319.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="38.5055%" y="325" width="0.0163%" height="15" fill="rgb(227,97,0)" fg:x="2360" fg:w="1"/><text x="38.7555%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (33 samples, 0.54%)</title><rect x="38.6034%" y="309" width="0.5384%" height="15" fill="rgb(234,150,53)" fg:x="2366" fg:w="33"/><text x="38.8534%" y="319.50"></text></g><g><title>syscall (26 samples, 0.42%)</title><rect x="38.7176%" y="293" width="0.4242%" height="15" fill="rgb(228,201,54)" fg:x="2373" fg:w="26"/><text x="38.9676%" y="303.50"></text></g><g><title>tokio::runtime::driver::Driver::park (1 samples, 0.02%)</title><rect x="39.1418%" y="309" width="0.0163%" height="15" fill="rgb(222,22,37)" fg:x="2399" fg:w="1"/><text x="39.3918%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (50 samples, 0.82%)</title><rect x="38.4402%" y="341" width="0.8158%" height="15" fill="rgb(237,53,32)" fg:x="2356" fg:w="50"/><text x="38.6902%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (45 samples, 0.73%)</title><rect x="38.5218%" y="325" width="0.7342%" height="15" fill="rgb(233,25,53)" fg:x="2361" fg:w="45"/><text x="38.7718%" y="335.50"></text></g><g><title>tokio::runtime::park::Inner::park (6 samples, 0.10%)</title><rect x="39.1581%" y="309" width="0.0979%" height="15" fill="rgb(210,40,34)" fg:x="2400" fg:w="6"/><text x="39.4081%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 0.10%)</title><rect x="39.1581%" y="293" width="0.0979%" height="15" fill="rgb(241,220,44)" fg:x="2400" fg:w="6"/><text x="39.4081%" y="303.50"></text></g><g><title>syscall (6 samples, 0.10%)</title><rect x="39.1581%" y="277" width="0.0979%" height="15" fill="rgb(235,28,35)" fg:x="2400" fg:w="6"/><text x="39.4081%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="39.7618%" y="309" width="0.0163%" height="15" fill="rgb(210,56,17)" fg:x="2437" fg:w="1"/><text x="40.0118%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.03%)</title><rect x="39.7781%" y="309" width="0.0326%" height="15" fill="rgb(224,130,29)" fg:x="2438" fg:w="2"/><text x="40.0281%" y="319.50"></text></g><g><title>clock_gettime (2 samples, 0.03%)</title><rect x="39.7781%" y="293" width="0.0326%" height="15" fill="rgb(235,212,8)" fg:x="2438" fg:w="2"/><text x="40.0281%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (78 samples, 1.27%)</title><rect x="39.6965%" y="325" width="1.2726%" height="15" fill="rgb(223,33,50)" fg:x="2433" fg:w="78"/><text x="39.9465%" y="335.50"></text></g><g><title>syscall (71 samples, 1.16%)</title><rect x="39.8107%" y="309" width="1.1584%" height="15" fill="rgb(219,149,13)" fg:x="2440" fg:w="71"/><text x="40.0607%" y="319.50"></text></g><g><title>sched_yield (2 samples, 0.03%)</title><rect x="40.9692%" y="309" width="0.0326%" height="15" fill="rgb(250,156,29)" fg:x="2511" fg:w="2"/><text x="41.2192%" y="319.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (5 samples, 0.08%)</title><rect x="40.9692%" y="325" width="0.0816%" height="15" fill="rgb(216,193,19)" fg:x="2511" fg:w="5"/><text x="41.2192%" y="335.50"></text></g><g><title>syscall (3 samples, 0.05%)</title><rect x="41.0018%" y="309" width="0.0489%" height="15" fill="rgb(216,135,14)" fg:x="2513" fg:w="3"/><text x="41.2518%" y="319.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.08%)</title><rect x="41.4097%" y="293" width="0.0816%" height="15" fill="rgb(241,47,5)" fg:x="2538" fg:w="5"/><text x="41.6597%" y="303.50"></text></g><g><title>&lt;chrono::offset::utc::Utc as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="42.4702%" y="261" width="0.0163%" height="15" fill="rgb(233,42,35)" fg:x="2603" fg:w="1"/><text x="42.7202%" y="271.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (22 samples, 0.36%)</title><rect x="42.4865%" y="261" width="0.3589%" height="15" fill="rgb(231,13,6)" fg:x="2604" fg:w="22"/><text x="42.7365%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::convert::From&lt;libc::unix::timespec&gt;&gt;::from (1 samples, 0.02%)</title><rect x="42.9434%" y="245" width="0.0163%" height="15" fill="rgb(207,181,40)" fg:x="2632" fg:w="1"/><text x="43.1934%" y="255.50"></text></g><g><title>std::sys::unix::time::Timespec::new (1 samples, 0.02%)</title><rect x="42.9434%" y="229" width="0.0163%" height="15" fill="rgb(254,173,49)" fg:x="2632" fg:w="1"/><text x="43.1934%" y="239.50"></text></g><g><title>clock_getres (3 samples, 0.05%)</title><rect x="42.9597%" y="245" width="0.0489%" height="15" fill="rgb(221,1,38)" fg:x="2633" fg:w="3"/><text x="43.2097%" y="255.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (86 samples, 1.40%)</title><rect x="42.8455%" y="261" width="1.4032%" height="15" fill="rgb(206,124,46)" fg:x="2626" fg:w="86"/><text x="43.0955%" y="271.50"></text></g><g><title>clock_gettime (76 samples, 1.24%)</title><rect x="43.0086%" y="245" width="1.2400%" height="15" fill="rgb(249,21,11)" fg:x="2636" fg:w="76"/><text x="43.2586%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (23 samples, 0.38%)</title><rect x="44.2487%" y="245" width="0.3753%" height="15" fill="rgb(222,201,40)" fg:x="2712" fg:w="23"/><text x="44.4987%" y="255.50"></text></g><g><title>std::time::SystemTime::duration_since (35 samples, 0.57%)</title><rect x="44.2487%" y="261" width="0.5711%" height="15" fill="rgb(235,61,29)" fg:x="2712" fg:w="35"/><text x="44.4987%" y="271.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (12 samples, 0.20%)</title><rect x="44.6239%" y="245" width="0.1958%" height="15" fill="rgb(219,207,3)" fg:x="2735" fg:w="12"/><text x="44.8739%" y="255.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (11 samples, 0.18%)</title><rect x="44.6402%" y="229" width="0.1795%" height="15" fill="rgb(222,56,46)" fg:x="2736" fg:w="11"/><text x="44.8902%" y="239.50"></text></g><g><title>core::time::Duration::new (5 samples, 0.08%)</title><rect x="44.7381%" y="213" width="0.0816%" height="15" fill="rgb(239,76,54)" fg:x="2742" fg:w="5"/><text x="44.9881%" y="223.50"></text></g><g><title>chrono::offset::utc::Utc::now (167 samples, 2.72%)</title><rect x="42.1113%" y="277" width="2.7248%" height="15" fill="rgb(231,124,27)" fg:x="2581" fg:w="167"/><text x="42.3613%" y="287.50">ch..</text></g><g><title>std::time::SystemTime::now (1 samples, 0.02%)</title><rect x="44.8197%" y="261" width="0.0163%" height="15" fill="rgb(249,195,6)" fg:x="2747" fg:w="1"/><text x="45.0697%" y="271.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (1 samples, 0.02%)</title><rect x="44.8197%" y="245" width="0.0163%" height="15" fill="rgb(237,174,47)" fg:x="2747" fg:w="1"/><text x="45.0697%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.03%)</title><rect x="52.7819%" y="213" width="0.0326%" height="15" fill="rgb(206,201,31)" fg:x="3235" fg:w="2"/><text x="53.0319%" y="223.50"></text></g><g><title>__mprotect (1 samples, 0.02%)</title><rect x="52.7982%" y="197" width="0.0163%" height="15" fill="rgb(231,57,52)" fg:x="3236" fg:w="1"/><text x="53.0482%" y="207.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (148 samples, 2.41%)</title><rect x="52.7655%" y="261" width="2.4147%" height="15" fill="rgb(248,177,22)" fg:x="3234" fg:w="148"/><text x="53.0155%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (148 samples, 2.41%)</title><rect x="52.7655%" y="245" width="2.4147%" height="15" fill="rgb(215,211,37)" fg:x="3234" fg:w="148"/><text x="53.0155%" y="255.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (148 samples, 2.41%)</title><rect x="52.7655%" y="229" width="2.4147%" height="15" fill="rgb(241,128,51)" fg:x="3234" fg:w="148"/><text x="53.0155%" y="239.50">al..</text></g><g><title>realloc (145 samples, 2.37%)</title><rect x="52.8145%" y="213" width="2.3658%" height="15" fill="rgb(227,165,31)" fg:x="3237" fg:w="145"/><text x="53.0645%" y="223.50">re..</text></g><g><title>__mprotect (18 samples, 0.29%)</title><rect x="54.8866%" y="197" width="0.2937%" height="15" fill="rgb(228,167,24)" fg:x="3364" fg:w="18"/><text x="55.1366%" y="207.50"></text></g><g><title>chrono::naive::date::NaiveDate::add_days (1 samples, 0.02%)</title><rect x="55.5392%" y="245" width="0.0163%" height="15" fill="rgb(228,143,12)" fg:x="3404" fg:w="1"/><text x="55.7892%" y="255.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (2 samples, 0.03%)</title><rect x="55.5556%" y="245" width="0.0326%" height="15" fill="rgb(249,149,8)" fg:x="3405" fg:w="2"/><text x="55.8056%" y="255.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (29 samples, 0.47%)</title><rect x="55.1803%" y="261" width="0.4732%" height="15" fill="rgb(243,35,44)" fg:x="3382" fg:w="29"/><text x="55.4303%" y="271.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (4 samples, 0.07%)</title><rect x="55.5882%" y="245" width="0.0653%" height="15" fill="rgb(246,89,9)" fg:x="3407" fg:w="4"/><text x="55.8382%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (57 samples, 0.93%)</title><rect x="67.3846%" y="245" width="0.9300%" height="15" fill="rgb(233,213,13)" fg:x="4130" fg:w="57"/><text x="67.6346%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.47%)</title><rect x="67.8414%" y="229" width="0.4732%" height="15" fill="rgb(233,141,41)" fg:x="4158" fg:w="29"/><text x="68.0914%" y="239.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (783 samples, 12.78%)</title><rect x="55.6535%" y="261" width="12.7753%" height="15" fill="rgb(239,167,4)" fg:x="3411" fg:w="783"/><text x="55.9035%" y="271.50">hashbrown::rustc_en..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.11%)</title><rect x="68.3146%" y="245" width="0.1142%" height="15" fill="rgb(209,217,16)" fg:x="4187" fg:w="7"/><text x="68.5646%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.05%)</title><rect x="68.3798%" y="229" width="0.0489%" height="15" fill="rgb(219,88,35)" fg:x="4191" fg:w="3"/><text x="68.6298%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="68.3961%" y="213" width="0.0326%" height="15" fill="rgb(220,193,23)" fg:x="4192" fg:w="2"/><text x="68.6461%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::wake_writer_or_readers (3 samples, 0.05%)</title><rect x="68.4288%" y="261" width="0.0489%" height="15" fill="rgb(230,90,52)" fg:x="4194" fg:w="3"/><text x="68.6788%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::wake_writer (3 samples, 0.05%)</title><rect x="68.4288%" y="245" width="0.0489%" height="15" fill="rgb(252,106,19)" fg:x="4194" fg:w="3"/><text x="68.6788%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (3 samples, 0.05%)</title><rect x="68.4288%" y="229" width="0.0489%" height="15" fill="rgb(206,74,20)" fg:x="4194" fg:w="3"/><text x="68.6788%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.05%)</title><rect x="68.4288%" y="213" width="0.0489%" height="15" fill="rgb(230,138,44)" fg:x="4194" fg:w="3"/><text x="68.6788%" y="223.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (1 samples, 0.02%)</title><rect x="70.9251%" y="229" width="0.0163%" height="15" fill="rgb(235,182,43)" fg:x="4347" fg:w="1"/><text x="71.1751%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="70.9251%" y="213" width="0.0163%" height="15" fill="rgb(242,16,51)" fg:x="4347" fg:w="1"/><text x="71.1751%" y="223.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.02%)</title><rect x="70.9251%" y="197" width="0.0163%" height="15" fill="rgb(248,9,4)" fg:x="4347" fg:w="1"/><text x="71.1751%" y="207.50"></text></g><g><title>__errno_location (1 samples, 0.02%)</title><rect x="70.9251%" y="181" width="0.0163%" height="15" fill="rgb(210,31,22)" fg:x="4347" fg:w="1"/><text x="71.1751%" y="191.50"></text></g><g><title>std::sys::unix::futex::futex_wait (224 samples, 3.65%)</title><rect x="70.9251%" y="245" width="3.6548%" height="15" fill="rgb(239,54,39)" fg:x="4347" fg:w="224"/><text x="71.1751%" y="255.50">std:..</text></g><g><title>syscall (223 samples, 3.64%)</title><rect x="70.9414%" y="229" width="3.6384%" height="15" fill="rgb(230,99,41)" fg:x="4348" fg:w="223"/><text x="71.1914%" y="239.50">sysc..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::write_contended (843 samples, 13.75%)</title><rect x="68.4777%" y="261" width="13.7543%" height="15" fill="rgb(253,106,12)" fg:x="4197" fg:w="843"/><text x="68.7277%" y="271.50">std::sys::unix::locks..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_write (469 samples, 7.65%)</title><rect x="74.5799%" y="245" width="7.6521%" height="15" fill="rgb(213,46,41)" fg:x="4571" fg:w="469"/><text x="74.8299%" y="255.50">std::sys::..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_until (469 samples, 7.65%)</title><rect x="74.5799%" y="229" width="7.6521%" height="15" fill="rgb(215,133,35)" fg:x="4571" fg:w="469"/><text x="74.8299%" y="239.50">std::sys::..</text></g><g><title>core::hint::spin_loop (469 samples, 7.65%)</title><rect x="74.5799%" y="213" width="7.6521%" height="15" fill="rgb(213,28,5)" fg:x="4571" fg:w="469"/><text x="74.8299%" y="223.50">core::hint..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (469 samples, 7.65%)</title><rect x="74.5799%" y="197" width="7.6521%" height="15" fill="rgb(215,77,49)" fg:x="4571" fg:w="469"/><text x="74.8299%" y="207.50">core::core..</text></g><g><title>ratelimit_benchmark::benchmark_ratelimiter0_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (2,905 samples, 47.40%)</title><rect x="41.4913%" y="293" width="47.3976%" height="15" fill="rgb(248,100,22)" fg:x="2543" fg:w="2905"/><text x="41.7413%" y="303.50">ratelimit_benchmark::benchmark_ratelimiter0_tokio::{{closure}}::{{closure}}::{..</text></g><g><title>ratelimit::version0::RateLimiter0::ratelimit0 (2,700 samples, 44.05%)</title><rect x="44.8360%" y="277" width="44.0529%" height="15" fill="rgb(208,67,9)" fg:x="2748" fg:w="2700"/><text x="45.0860%" y="287.50">ratelimit::version0::RateLimiter0::ratelimit0</text></g><g><title>syscall (408 samples, 6.66%)</title><rect x="82.2320%" y="261" width="6.6569%" height="15" fill="rgb(219,133,21)" fg:x="5040" fg:w="408"/><text x="82.4820%" y="271.50">syscall</text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (31 samples, 0.51%)</title><rect x="89.0194%" y="277" width="0.5058%" height="15" fill="rgb(246,46,29)" fg:x="5456" fg:w="31"/><text x="89.2694%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (41 samples, 0.67%)</title><rect x="88.8889%" y="293" width="0.6690%" height="15" fill="rgb(246,185,52)" fg:x="5448" fg:w="41"/><text x="89.1389%" y="303.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (2 samples, 0.03%)</title><rect x="89.5252%" y="277" width="0.0326%" height="15" fill="rgb(252,136,11)" fg:x="5487" fg:w="2"/><text x="89.7752%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2,961 samples, 48.31%)</title><rect x="41.2955%" y="309" width="48.3113%" height="15" fill="rgb(219,138,53)" fg:x="2531" fg:w="2961"/><text x="41.5455%" y="319.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (3 samples, 0.05%)</title><rect x="89.5578%" y="293" width="0.0489%" height="15" fill="rgb(211,51,23)" fg:x="5489" fg:w="3"/><text x="89.8078%" y="303.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (6 samples, 0.10%)</title><rect x="89.9005%" y="293" width="0.0979%" height="15" fill="rgb(247,221,28)" fg:x="5510" fg:w="6"/><text x="90.1505%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (27 samples, 0.44%)</title><rect x="89.6068%" y="309" width="0.4405%" height="15" fill="rgb(251,222,45)" fg:x="5492" fg:w="27"/><text x="89.8568%" y="319.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (3 samples, 0.05%)</title><rect x="89.9984%" y="293" width="0.0489%" height="15" fill="rgb(217,162,53)" fg:x="5516" fg:w="3"/><text x="90.2484%" y="303.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (32 samples, 0.52%)</title><rect x="91.4178%" y="277" width="0.5221%" height="15" fill="rgb(229,93,14)" fg:x="5603" fg:w="32"/><text x="91.6678%" y="287.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (1 samples, 0.02%)</title><rect x="92.2500%" y="245" width="0.0163%" height="15" fill="rgb(209,67,49)" fg:x="5654" fg:w="1"/><text x="92.5000%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (7 samples, 0.11%)</title><rect x="92.2663%" y="245" width="0.1142%" height="15" fill="rgb(213,87,29)" fg:x="5655" fg:w="7"/><text x="92.5163%" y="255.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.07%)</title><rect x="92.3805%" y="245" width="0.0653%" height="15" fill="rgb(205,151,52)" fg:x="5662" fg:w="4"/><text x="92.6305%" y="255.50"></text></g><g><title>clock_gettime (4 samples, 0.07%)</title><rect x="92.3805%" y="229" width="0.0653%" height="15" fill="rgb(253,215,39)" fg:x="5662" fg:w="4"/><text x="92.6305%" y="239.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (413 samples, 6.74%)</title><rect x="90.5042%" y="293" width="6.7385%" height="15" fill="rgb(221,220,41)" fg:x="5547" fg:w="413"/><text x="90.7542%" y="303.50">&lt;futures_..</text></g><g><title>tokio::runtime::park::wake (325 samples, 5.30%)</title><rect x="91.9400%" y="277" width="5.3027%" height="15" fill="rgb(218,133,21)" fg:x="5635" fg:w="325"/><text x="92.1900%" y="287.50">tokio:..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (313 samples, 5.11%)</title><rect x="92.1357%" y="261" width="5.1069%" height="15" fill="rgb(221,193,43)" fg:x="5647" fg:w="313"/><text x="92.3857%" y="271.50">parkin..</text></g><g><title>syscall (294 samples, 4.80%)</title><rect x="92.4457%" y="245" width="4.7969%" height="15" fill="rgb(240,128,52)" fg:x="5666" fg:w="294"/><text x="92.6957%" y="255.50">syscall</text></g><g><title>__libc_free (1 samples, 0.02%)</title><rect x="97.2426%" y="293" width="0.0163%" height="15" fill="rgb(253,114,12)" fg:x="5960" fg:w="1"/><text x="97.4926%" y="303.50"></text></g><g><title>futures_task::waker::wake_by_ref_arc_raw (1 samples, 0.02%)</title><rect x="97.2589%" y="293" width="0.0163%" height="15" fill="rgb(215,223,47)" fg:x="5961" fg:w="1"/><text x="97.5089%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (1 samples, 0.02%)</title><rect x="97.2752%" y="293" width="0.0163%" height="15" fill="rgb(248,225,23)" fg:x="5962" fg:w="1"/><text x="97.5252%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Trailer::addr_of_owned (1 samples, 0.02%)</title><rect x="97.2916%" y="293" width="0.0163%" height="15" fill="rgb(250,108,0)" fg:x="5963" fg:w="1"/><text x="97.5416%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join (1 samples, 0.02%)</title><rect x="97.3079%" y="293" width="0.0163%" height="15" fill="rgb(228,208,7)" fg:x="5964" fg:w="1"/><text x="97.5579%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.02%)</title><rect x="97.3242%" y="261" width="0.0163%" height="15" fill="rgb(244,45,10)" fg:x="5965" fg:w="1"/><text x="97.5742%" y="271.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (2 samples, 0.03%)</title><rect x="97.3242%" y="293" width="0.0326%" height="15" fill="rgb(207,125,25)" fg:x="5965" fg:w="2"/><text x="97.5742%" y="303.50"></text></g><g><title>futures_task::waker::drop_arc_raw (2 samples, 0.03%)</title><rect x="97.3242%" y="277" width="0.0326%" height="15" fill="rgb(210,195,18)" fg:x="5965" fg:w="2"/><text x="97.5742%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="97.3405%" y="261" width="0.0163%" height="15" fill="rgb(249,80,12)" fg:x="5966" fg:w="1"/><text x="97.5905%" y="271.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (97 samples, 1.58%)</title><rect x="97.3568%" y="293" width="1.5826%" height="15" fill="rgb(221,65,9)" fg:x="5967" fg:w="97"/><text x="97.6068%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.10%)</title><rect x="98.8416%" y="277" width="0.0979%" height="15" fill="rgb(235,49,36)" fg:x="6058" fg:w="6"/><text x="99.0916%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (9 samples, 0.15%)</title><rect x="98.9395%" y="293" width="0.1468%" height="15" fill="rgb(225,32,20)" fg:x="6064" fg:w="9"/><text x="99.1895%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (574 samples, 9.37%)</title><rect x="90.0473%" y="309" width="9.3653%" height="15" fill="rgb(215,141,46)" fg:x="5519" fg:w="574"/><text x="90.2973%" y="319.50">tokio::runtim..</text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (20 samples, 0.33%)</title><rect x="99.0863%" y="293" width="0.3263%" height="15" fill="rgb(250,160,47)" fg:x="6073" fg:w="20"/><text x="99.3363%" y="303.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (35 samples, 0.57%)</title><rect x="99.4126%" y="309" width="0.5711%" height="15" fill="rgb(216,222,40)" fg:x="6093" fg:w="35"/><text x="99.6626%" y="319.50"></text></g><g><title>all (6,129 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="6129"/><text x="0.2500%" y="575.50"></text></g><g><title>tokio-runtime-w (3,973 samples, 64.82%)</title><rect x="35.1770%" y="549" width="64.8230%" height="15" fill="rgb(207,178,40)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="559.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,973 samples, 64.82%)</title><rect x="35.1770%" y="533" width="64.8230%" height="15" fill="rgb(221,136,13)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="543.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,973 samples, 64.82%)</title><rect x="35.1770%" y="517" width="64.8230%" height="15" fill="rgb(249,199,10)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,973 samples, 64.82%)</title><rect x="35.1770%" y="501" width="64.8230%" height="15" fill="rgb(249,222,13)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,973 samples, 64.82%)</title><rect x="35.1770%" y="485" width="64.8230%" height="15" fill="rgb(244,185,38)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,973 samples, 64.82%)</title><rect x="35.1770%" y="469" width="64.8230%" height="15" fill="rgb(236,202,9)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3,973 samples, 64.82%)</title><rect x="35.1770%" y="453" width="64.8230%" height="15" fill="rgb(250,229,37)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="463.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,973 samples, 64.82%)</title><rect x="35.1770%" y="437" width="64.8230%" height="15" fill="rgb(206,174,23)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="447.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3,973 samples, 64.82%)</title><rect x="35.1770%" y="421" width="64.8230%" height="15" fill="rgb(211,33,43)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="431.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (3,973 samples, 64.82%)</title><rect x="35.1770%" y="405" width="64.8230%" height="15" fill="rgb(245,58,50)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="415.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (3,973 samples, 64.82%)</title><rect x="35.1770%" y="389" width="64.8230%" height="15" fill="rgb(244,68,36)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (3,973 samples, 64.82%)</title><rect x="35.1770%" y="373" width="64.8230%" height="15" fill="rgb(232,229,15)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="383.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (3,973 samples, 64.82%)</title><rect x="35.1770%" y="357" width="64.8230%" height="15" fill="rgb(254,30,23)" fg:x="2156" fg:w="3973"/><text x="35.4270%" y="367.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3,723 samples, 60.74%)</title><rect x="39.2560%" y="341" width="60.7440%" height="15" fill="rgb(235,160,14)" fg:x="2406" fg:w="3723"/><text x="39.5060%" y="351.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,613 samples, 58.95%)</title><rect x="41.0507%" y="325" width="58.9493%" height="15" fill="rgb(212,155,44)" fg:x="2516" fg:w="3613"/><text x="41.3007%" y="335.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::waker::raw_waker (1 samples, 0.02%)</title><rect x="99.9837%" y="309" width="0.0163%" height="15" fill="rgb(226,2,50)" fg:x="6128" fg:w="1"/><text x="100.2337%" y="319.50"></text></g></svg></svg>