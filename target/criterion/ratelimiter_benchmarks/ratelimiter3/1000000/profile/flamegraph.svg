<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="4820"><g><title>&lt;chrono::offset::utc::Utc as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="0.1867%" y="101" width="0.0207%" height="15" fill="rgb(206,45,38)" fg:x="9" fg:w="1"/><text x="0.4367%" y="111.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (18 samples, 0.37%)</title><rect x="0.2075%" y="101" width="0.3734%" height="15" fill="rgb(226,6,15)" fg:x="10" fg:w="18"/><text x="0.4575%" y="111.50"></text></g><g><title>clock_gettime (30 samples, 0.62%)</title><rect x="0.5809%" y="85" width="0.6224%" height="15" fill="rgb(232,22,54)" fg:x="28" fg:w="30"/><text x="0.8309%" y="95.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (31 samples, 0.64%)</title><rect x="0.5809%" y="101" width="0.6432%" height="15" fill="rgb(229,222,32)" fg:x="28" fg:w="31"/><text x="0.8309%" y="111.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.02%)</title><rect x="1.2033%" y="85" width="0.0207%" height="15" fill="rgb(228,62,29)" fg:x="58" fg:w="1"/><text x="1.4533%" y="95.50"></text></g><g><title>&lt;i32 as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.02%)</title><rect x="1.2033%" y="69" width="0.0207%" height="15" fill="rgb(251,103,34)" fg:x="58" fg:w="1"/><text x="1.4533%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.10%)</title><rect x="1.2241%" y="85" width="0.1037%" height="15" fill="rgb(233,12,30)" fg:x="59" fg:w="5"/><text x="1.4741%" y="95.50"></text></g><g><title>chrono::offset::utc::Utc::now (63 samples, 1.31%)</title><rect x="0.0622%" y="117" width="1.3071%" height="15" fill="rgb(238,52,0)" fg:x="3" fg:w="63"/><text x="0.3122%" y="127.50"></text></g><g><title>std::time::SystemTime::duration_since (7 samples, 0.15%)</title><rect x="1.2241%" y="101" width="0.1452%" height="15" fill="rgb(223,98,5)" fg:x="59" fg:w="7"/><text x="1.4741%" y="111.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (2 samples, 0.04%)</title><rect x="1.3278%" y="85" width="0.0415%" height="15" fill="rgb(228,75,37)" fg:x="64" fg:w="2"/><text x="1.5778%" y="95.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.04%)</title><rect x="1.3278%" y="69" width="0.0415%" height="15" fill="rgb(205,115,49)" fg:x="64" fg:w="2"/><text x="1.5778%" y="79.50"></text></g><g><title>core::time::Duration::new (2 samples, 0.04%)</title><rect x="1.3278%" y="53" width="0.0415%" height="15" fill="rgb(250,154,43)" fg:x="64" fg:w="2"/><text x="1.5778%" y="63.50"></text></g><g><title>&lt;crossbeam_skiplist::map::Entry&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.21%)</title><rect x="4.5021%" y="101" width="0.2075%" height="15" fill="rgb(226,43,29)" fg:x="217" fg:w="10"/><text x="4.7521%" y="111.50"></text></g><g><title>chrono::naive::date::NaiveDate::add_days (1 samples, 0.02%)</title><rect x="4.9378%" y="85" width="0.0207%" height="15" fill="rgb(249,228,39)" fg:x="238" fg:w="1"/><text x="5.1878%" y="95.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (14 samples, 0.29%)</title><rect x="4.7095%" y="101" width="0.2905%" height="15" fill="rgb(216,79,43)" fg:x="227" fg:w="14"/><text x="4.9595%" y="111.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (2 samples, 0.04%)</title><rect x="4.9585%" y="85" width="0.0415%" height="15" fill="rgb(228,95,12)" fg:x="239" fg:w="2"/><text x="5.2085%" y="95.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (2 samples, 0.04%)</title><rect x="5.1245%" y="69" width="0.0415%" height="15" fill="rgb(249,221,15)" fg:x="247" fg:w="2"/><text x="5.3745%" y="79.50"></text></g><g><title>crossbeam_epoch::default::with_handle (10 samples, 0.21%)</title><rect x="5.0000%" y="101" width="0.2075%" height="15" fill="rgb(233,34,13)" fg:x="241" fg:w="10"/><text x="5.2500%" y="111.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (4 samples, 0.08%)</title><rect x="5.1245%" y="85" width="0.0830%" height="15" fill="rgb(214,103,39)" fg:x="247" fg:w="4"/><text x="5.3745%" y="95.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (2 samples, 0.04%)</title><rect x="5.1660%" y="69" width="0.0415%" height="15" fill="rgb(251,126,39)" fg:x="249" fg:w="2"/><text x="5.4160%" y="79.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (109 samples, 2.26%)</title><rect x="5.2075%" y="101" width="2.2614%" height="15" fill="rgb(214,216,36)" fg:x="251" fg:w="109"/><text x="5.4575%" y="111.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,512 samples, 93.61%)</title><rect x="0.0000%" y="165" width="93.6100%" height="15" fill="rgb(220,221,8)" fg:x="0" fg:w="4512"/><text x="0.2500%" y="175.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,512 samples, 93.61%)</title><rect x="0.0000%" y="149" width="93.6100%" height="15" fill="rgb(240,216,3)" fg:x="0" fg:w="4512"/><text x="0.2500%" y="159.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (4,512 samples, 93.61%)</title><rect x="0.0000%" y="133" width="93.6100%" height="15" fill="rgb(232,218,17)" fg:x="0" fg:w="4512"/><text x="0.2500%" y="143.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>ratelimit::version3::RateLimiter3::ratelimit3 (4,446 samples, 92.24%)</title><rect x="1.3693%" y="117" width="92.2407%" height="15" fill="rgb(229,163,45)" fg:x="66" fg:w="4446"/><text x="1.6193%" y="127.50">ratelimit::version3::RateLimiter3::ratelimit3</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (4,152 samples, 86.14%)</title><rect x="7.4689%" y="101" width="86.1411%" height="15" fill="rgb(231,110,42)" fg:x="360" fg:w="4152"/><text x="7.7189%" y="111.50">crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (4,140 samples, 85.89%)</title><rect x="7.7178%" y="85" width="85.8921%" height="15" fill="rgb(208,170,48)" fg:x="372" fg:w="4140"/><text x="7.9678%" y="95.50">crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position</text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (3 samples, 0.06%)</title><rect x="93.6100%" y="117" width="0.0622%" height="15" fill="rgb(239,116,25)" fg:x="4512" fg:w="3"/><text x="93.8600%" y="127.50"></text></g><g><title>chrono::offset::utc::Utc::now (4 samples, 0.08%)</title><rect x="93.6100%" y="133" width="0.0830%" height="15" fill="rgb(219,200,50)" fg:x="4512" fg:w="4"/><text x="93.8600%" y="143.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.02%)</title><rect x="93.6722%" y="117" width="0.0207%" height="15" fill="rgb(245,200,0)" fg:x="4515" fg:w="1"/><text x="93.9222%" y="127.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (1 samples, 0.02%)</title><rect x="93.6722%" y="101" width="0.0207%" height="15" fill="rgb(245,119,33)" fg:x="4515" fg:w="1"/><text x="93.9222%" y="111.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.02%)</title><rect x="93.6722%" y="85" width="0.0207%" height="15" fill="rgb(231,125,12)" fg:x="4515" fg:w="1"/><text x="93.9222%" y="95.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.02%)</title><rect x="93.6722%" y="69" width="0.0207%" height="15" fill="rgb(216,96,41)" fg:x="4515" fg:w="1"/><text x="93.9222%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.02%)</title><rect x="93.6722%" y="53" width="0.0207%" height="15" fill="rgb(248,43,45)" fg:x="4515" fg:w="1"/><text x="93.9222%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="93.6722%" y="37" width="0.0207%" height="15" fill="rgb(217,222,7)" fg:x="4515" fg:w="1"/><text x="93.9222%" y="47.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (2 samples, 0.04%)</title><rect x="93.7137%" y="117" width="0.0415%" height="15" fill="rgb(233,28,6)" fg:x="4517" fg:w="2"/><text x="93.9637%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[I]&gt; as core::iter::traits::collect::FromIterator&lt;I&gt;&gt;::from_iter (35 samples, 0.73%)</title><rect x="93.9004%" y="101" width="0.7261%" height="15" fill="rgb(231,218,15)" fg:x="4526" fg:w="35"/><text x="94.1504%" y="111.50"></text></g><g><title>__libc_malloc (19 samples, 0.39%)</title><rect x="94.2324%" y="85" width="0.3942%" height="15" fill="rgb(226,171,48)" fg:x="4542" fg:w="19"/><text x="94.4824%" y="95.50"></text></g><g><title>__rdl_alloc (23 samples, 0.48%)</title><rect x="94.6266%" y="101" width="0.4772%" height="15" fill="rgb(235,201,9)" fg:x="4561" fg:w="23"/><text x="94.8766%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 0.48%)</title><rect x="94.6266%" y="85" width="0.4772%" height="15" fill="rgb(217,80,15)" fg:x="4561" fg:w="23"/><text x="94.8766%" y="95.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (23 samples, 0.48%)</title><rect x="94.6266%" y="69" width="0.4772%" height="15" fill="rgb(219,152,8)" fg:x="4561" fg:w="23"/><text x="94.8766%" y="79.50"></text></g><g><title>posix_memalign (22 samples, 0.46%)</title><rect x="94.6473%" y="53" width="0.4564%" height="15" fill="rgb(243,107,38)" fg:x="4562" fg:w="22"/><text x="94.8973%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.06%)</title><rect x="95.1037%" y="101" width="0.0622%" height="15" fill="rgb(231,17,5)" fg:x="4584" fg:w="3"/><text x="95.3537%" y="111.50"></text></g><g><title>all (4,820 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(209,25,54)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="479.50"></text></g><g><title>ratelimit_bench (4,820 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(219,0,2)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="463.50">ratelimit_bench</text></g><g><title>_start (4,820 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(246,9,5)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="447.50">_start</text></g><g><title>__libc_start_main (4,820 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(226,159,4)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="431.50">__libc_start_main</text></g><g><title>main (4,820 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(219,175,34)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (4,820 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(236,10,46)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,820 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(240,211,16)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,820 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(205,3,43)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,820 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(245,7,22)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="351.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4,820 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(239,132,32)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="335.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (4,820 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,202,34)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="319.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,820 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(254,200,22)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="303.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,820 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,10,39)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="287.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,820 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(226,210,39)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="271.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (4,820 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(208,219,16)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="255.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,820 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,158,51)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="239.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ratelimit_benchmark::main (4,820 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,14,44)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="223.50">ratelimit_benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (4,820 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,97,39)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="207.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (4,820 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(218,198,43)" fg:x="0" fg:w="4820"/><text x="0.2500%" y="191.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (308 samples, 6.39%)</title><rect x="93.6100%" y="165" width="6.3900%" height="15" fill="rgb(231,104,20)" fg:x="4512" fg:w="308"/><text x="93.8600%" y="175.50">&lt;criteri..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (308 samples, 6.39%)</title><rect x="93.6100%" y="149" width="6.3900%" height="15" fill="rgb(254,36,13)" fg:x="4512" fg:w="308"/><text x="93.8600%" y="159.50">criterio..</text></g><g><title>ratelimit::version3::RateLimiter3::ratelimit3 (304 samples, 6.31%)</title><rect x="93.6929%" y="133" width="6.3071%" height="15" fill="rgb(248,14,50)" fg:x="4516" fg:w="304"/><text x="93.9429%" y="143.50">ratelimi..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (301 samples, 6.24%)</title><rect x="93.7552%" y="117" width="6.2448%" height="15" fill="rgb(217,107,29)" fg:x="4519" fg:w="301"/><text x="94.0052%" y="127.50">crossbea..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (233 samples, 4.83%)</title><rect x="95.1660%" y="101" width="4.8340%" height="15" fill="rgb(251,169,33)" fg:x="4587" fg:w="233"/><text x="95.4160%" y="111.50">crossb..</text></g></svg></svg>