<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="3990"><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="0.0501%" y="197" width="0.0501%" height="15" fill="rgb(247,145,37)" fg:x="2" fg:w="2"/><text x="0.3001%" y="207.50"></text></g><g><title>__libc_malloc (166 samples, 4.16%)</title><rect x="0.2256%" y="165" width="4.1604%" height="15" fill="rgb(209,117,53)" fg:x="9" fg:w="166"/><text x="0.4756%" y="175.50">__lib..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="4.6115%" y="149" width="0.0251%" height="15" fill="rgb(212,90,42)" fg:x="184" fg:w="1"/><text x="4.8615%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (1 samples, 0.03%)</title><rect x="4.6366%" y="149" width="0.0251%" height="15" fill="rgb(218,164,37)" fg:x="185" fg:w="1"/><text x="4.8866%" y="159.50"></text></g><g><title>tokio::runtime::task::id::Id::next (3 samples, 0.08%)</title><rect x="4.6617%" y="149" width="0.0752%" height="15" fill="rgb(246,65,34)" fg:x="186" fg:w="3"/><text x="4.9117%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (50 samples, 1.25%)</title><rect x="4.7368%" y="133" width="1.2531%" height="15" fill="rgb(231,100,33)" fg:x="189" fg:w="50"/><text x="4.9868%" y="143.50"></text></g><g><title>__rdl_alloc (46 samples, 1.15%)</title><rect x="4.8371%" y="117" width="1.1529%" height="15" fill="rgb(228,126,14)" fg:x="193" fg:w="46"/><text x="5.0871%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46 samples, 1.15%)</title><rect x="4.8371%" y="101" width="1.1529%" height="15" fill="rgb(215,173,21)" fg:x="193" fg:w="46"/><text x="5.0871%" y="111.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (46 samples, 1.15%)</title><rect x="4.8371%" y="85" width="1.1529%" height="15" fill="rgb(210,6,40)" fg:x="193" fg:w="46"/><text x="5.0871%" y="95.50"></text></g><g><title>posix_memalign (45 samples, 1.13%)</title><rect x="4.8622%" y="69" width="1.1278%" height="15" fill="rgb(212,48,18)" fg:x="194" fg:w="45"/><text x="5.1122%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (239 samples, 5.99%)</title><rect x="0.1003%" y="181" width="5.9900%" height="15" fill="rgb(230,214,11)" fg:x="4" fg:w="239"/><text x="0.3503%" y="191.50">&lt;alloc::..</text></g><g><title>tokio::task::spawn::spawn (68 samples, 1.70%)</title><rect x="4.3860%" y="165" width="1.7043%" height="15" fill="rgb(254,105,39)" fg:x="175" fg:w="68"/><text x="4.6360%" y="175.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (54 samples, 1.35%)</title><rect x="4.7368%" y="149" width="1.3534%" height="15" fill="rgb(245,158,5)" fg:x="189" fg:w="54"/><text x="4.9868%" y="159.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (4 samples, 0.10%)</title><rect x="5.9900%" y="133" width="0.1003%" height="15" fill="rgb(249,208,11)" fg:x="239" fg:w="4"/><text x="6.2400%" y="143.50"></text></g><g><title>tokio::runtime::task::core::Header::set_owner_id (1 samples, 0.03%)</title><rect x="6.0652%" y="117" width="0.0251%" height="15" fill="rgb(210,39,28)" fg:x="242" fg:w="1"/><text x="6.3152%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (133 samples, 3.33%)</title><rect x="6.0902%" y="181" width="3.3333%" height="15" fill="rgb(211,56,53)" fg:x="243" fg:w="133"/><text x="6.3402%" y="191.50">&lt;co..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (133 samples, 3.33%)</title><rect x="6.0902%" y="165" width="3.3333%" height="15" fill="rgb(226,201,30)" fg:x="243" fg:w="133"/><text x="6.3402%" y="175.50">fut..</text></g><g><title>__libc_malloc (103 samples, 2.58%)</title><rect x="6.8421%" y="149" width="2.5815%" height="15" fill="rgb(239,101,34)" fg:x="273" fg:w="103"/><text x="7.0921%" y="159.50">__..</text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="11.1278%" y="133" width="0.0251%" height="15" fill="rgb(226,209,5)" fg:x="444" fg:w="1"/><text x="11.3778%" y="143.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (1 samples, 0.03%)</title><rect x="11.1529%" y="133" width="0.0251%" height="15" fill="rgb(250,105,47)" fg:x="445" fg:w="1"/><text x="11.4029%" y="143.50"></text></g><g><title>tokio::runtime::coop::Budget::unconstrained (1 samples, 0.03%)</title><rect x="11.1779%" y="133" width="0.0251%" height="15" fill="rgb(230,72,3)" fg:x="446" fg:w="1"/><text x="11.4279%" y="143.50"></text></g><g><title>tokio::runtime::coop::RestoreOnPending::made_progress (1 samples, 0.03%)</title><rect x="11.2030%" y="133" width="0.0251%" height="15" fill="rgb(232,218,39)" fg:x="447" fg:w="1"/><text x="11.4530%" y="143.50"></text></g><g><title>futures_task::waker::clone_arc_raw (1 samples, 0.03%)</title><rect x="11.4286%" y="101" width="0.0251%" height="15" fill="rgb(248,166,6)" fg:x="456" fg:w="1"/><text x="11.6786%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (12 samples, 0.30%)</title><rect x="11.2281%" y="133" width="0.3008%" height="15" fill="rgb(247,89,20)" fg:x="448" fg:w="12"/><text x="11.4781%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (5 samples, 0.13%)</title><rect x="11.4035%" y="117" width="0.1253%" height="15" fill="rgb(248,130,54)" fg:x="455" fg:w="5"/><text x="11.6535%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (3 samples, 0.08%)</title><rect x="11.4536%" y="101" width="0.0752%" height="15" fill="rgb(234,196,4)" fg:x="457" fg:w="3"/><text x="11.7036%" y="111.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 1.50%)</title><rect x="10.5013%" y="149" width="1.5038%" height="15" fill="rgb(250,143,31)" fg:x="419" fg:w="60"/><text x="10.7513%" y="159.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (19 samples, 0.48%)</title><rect x="11.5288%" y="133" width="0.4762%" height="15" fill="rgb(211,110,34)" fg:x="460" fg:w="19"/><text x="11.7788%" y="143.50"></text></g><g><title>__libc_free (24 samples, 0.60%)</title><rect x="12.1053%" y="133" width="0.6015%" height="15" fill="rgb(215,124,48)" fg:x="483" fg:w="24"/><text x="12.3553%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.10%)</title><rect x="12.7068%" y="133" width="0.1003%" height="15" fill="rgb(216,46,13)" fg:x="507" fg:w="4"/><text x="12.9568%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (6 samples, 0.15%)</title><rect x="12.8070%" y="133" width="0.1504%" height="15" fill="rgb(205,184,25)" fg:x="511" fg:w="6"/><text x="13.0570%" y="143.50"></text></g><g><title>futures_task::waker::drop_arc_raw (1 samples, 0.03%)</title><rect x="12.9323%" y="117" width="0.0251%" height="15" fill="rgb(228,1,10)" fg:x="516" fg:w="1"/><text x="13.1823%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="13.1830%" y="101" width="0.0752%" height="15" fill="rgb(213,116,27)" fg:x="526" fg:w="3"/><text x="13.4330%" y="111.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (12 samples, 0.30%)</title><rect x="12.9825%" y="117" width="0.3008%" height="15" fill="rgb(241,95,50)" fg:x="518" fg:w="12"/><text x="13.2325%" y="127.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.03%)</title><rect x="13.2581%" y="101" width="0.0251%" height="15" fill="rgb(238,48,32)" fg:x="529" fg:w="1"/><text x="13.5081%" y="111.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (5 samples, 0.13%)</title><rect x="13.2832%" y="117" width="0.1253%" height="15" fill="rgb(235,113,49)" fg:x="530" fg:w="5"/><text x="13.5332%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (19 samples, 0.48%)</title><rect x="12.9574%" y="133" width="0.4762%" height="15" fill="rgb(205,127,43)" fg:x="517" fg:w="19"/><text x="13.2074%" y="143.50"></text></g><g><title>tokio::runtime::task::state::State::unset_join_interested (1 samples, 0.03%)</title><rect x="13.4085%" y="117" width="0.0251%" height="15" fill="rgb(250,162,2)" fg:x="535" fg:w="1"/><text x="13.6585%" y="127.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (5 samples, 0.13%)</title><rect x="13.4336%" y="133" width="0.1253%" height="15" fill="rgb(220,13,41)" fg:x="536" fg:w="5"/><text x="13.6836%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt; (63 samples, 1.58%)</title><rect x="12.0050%" y="149" width="1.5789%" height="15" fill="rgb(249,221,25)" fg:x="479" fg:w="63"/><text x="12.2550%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_shutdown (1 samples, 0.03%)</title><rect x="13.5589%" y="133" width="0.0251%" height="15" fill="rgb(215,208,19)" fg:x="541" fg:w="1"/><text x="13.8089%" y="143.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (541 samples, 13.56%)</title><rect x="0.1003%" y="197" width="13.5589%" height="15" fill="rgb(236,175,2)" fg:x="4" fg:w="541"/><text x="0.3503%" y="207.50">criterion::bencher::..</text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (169 samples, 4.24%)</title><rect x="9.4236%" y="181" width="4.2356%" height="15" fill="rgb(241,52,2)" fg:x="376" fg:w="169"/><text x="9.6736%" y="191.50">&lt;futu..</text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (167 samples, 4.19%)</title><rect x="9.4737%" y="165" width="4.1855%" height="15" fill="rgb(248,140,14)" fg:x="378" fg:w="167"/><text x="9.7237%" y="175.50">&lt;futu..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (3 samples, 0.08%)</title><rect x="13.5840%" y="149" width="0.0752%" height="15" fill="rgb(253,22,42)" fg:x="542" fg:w="3"/><text x="13.8340%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park_yield (1 samples, 0.03%)</title><rect x="13.6591%" y="197" width="0.0251%" height="15" fill="rgb(234,61,47)" fg:x="545" fg:w="1"/><text x="13.9091%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (3 samples, 0.08%)</title><rect x="13.6842%" y="197" width="0.0752%" height="15" fill="rgb(208,226,15)" fg:x="546" fg:w="3"/><text x="13.9342%" y="207.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="13.9599%" y="165" width="0.0501%" height="15" fill="rgb(217,221,4)" fg:x="557" fg:w="2"/><text x="14.2099%" y="175.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (4 samples, 0.10%)</title><rect x="14.2105%" y="133" width="0.1003%" height="15" fill="rgb(212,174,34)" fg:x="567" fg:w="4"/><text x="14.4605%" y="143.50"></text></g><g><title>clock_getres (1 samples, 0.03%)</title><rect x="14.3860%" y="117" width="0.0251%" height="15" fill="rgb(253,83,4)" fg:x="574" fg:w="1"/><text x="14.6360%" y="127.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (24 samples, 0.60%)</title><rect x="14.3108%" y="133" width="0.6015%" height="15" fill="rgb(250,195,49)" fg:x="571" fg:w="24"/><text x="14.5608%" y="143.50"></text></g><g><title>clock_gettime (20 samples, 0.50%)</title><rect x="14.4110%" y="117" width="0.5013%" height="15" fill="rgb(241,192,25)" fg:x="575" fg:w="20"/><text x="14.6610%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.13%)</title><rect x="14.9123%" y="117" width="0.1253%" height="15" fill="rgb(208,124,10)" fg:x="595" fg:w="5"/><text x="15.1623%" y="127.50"></text></g><g><title>chrono::offset::utc::Utc::now (39 samples, 0.98%)</title><rect x="14.0852%" y="149" width="0.9774%" height="15" fill="rgb(222,33,0)" fg:x="562" fg:w="39"/><text x="14.3352%" y="159.50"></text></g><g><title>std::time::SystemTime::duration_since (6 samples, 0.15%)</title><rect x="14.9123%" y="133" width="0.1504%" height="15" fill="rgb(234,209,28)" fg:x="595" fg:w="6"/><text x="15.1623%" y="143.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (1 samples, 0.03%)</title><rect x="15.0376%" y="117" width="0.0251%" height="15" fill="rgb(224,11,23)" fg:x="600" fg:w="1"/><text x="15.2876%" y="127.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.03%)</title><rect x="15.0376%" y="101" width="0.0251%" height="15" fill="rgb(232,99,1)" fg:x="600" fg:w="1"/><text x="15.2876%" y="111.50"></text></g><g><title>&lt;crossbeam_skiplist::map::Entry&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.23%)</title><rect x="16.6917%" y="133" width="0.2256%" height="15" fill="rgb(237,95,45)" fg:x="666" fg:w="9"/><text x="16.9417%" y="143.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (4 samples, 0.10%)</title><rect x="16.9173%" y="133" width="0.1003%" height="15" fill="rgb(208,109,11)" fg:x="675" fg:w="4"/><text x="17.1673%" y="143.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (1 samples, 0.03%)</title><rect x="16.9925%" y="117" width="0.0251%" height="15" fill="rgb(216,190,48)" fg:x="678" fg:w="1"/><text x="17.2425%" y="127.50"></text></g><g><title>crossbeam_epoch::default::with_handle (4 samples, 0.10%)</title><rect x="17.0175%" y="133" width="0.1003%" height="15" fill="rgb(251,171,36)" fg:x="679" fg:w="4"/><text x="17.2675%" y="143.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.03%)</title><rect x="17.0927%" y="117" width="0.0251%" height="15" fill="rgb(230,62,22)" fg:x="682" fg:w="1"/><text x="17.3427%" y="127.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1 samples, 0.03%)</title><rect x="17.0927%" y="101" width="0.0251%" height="15" fill="rgb(225,114,35)" fg:x="682" fg:w="1"/><text x="17.3427%" y="111.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (58 samples, 1.45%)</title><rect x="17.1178%" y="133" width="1.4536%" height="15" fill="rgb(215,118,42)" fg:x="683" fg:w="58"/><text x="17.3678%" y="143.50"></text></g><g><title>ratelimit_benchmark::benchmark_ratelimiter3_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (2,803 samples, 70.25%)</title><rect x="14.0100%" y="165" width="70.2506%" height="15" fill="rgb(243,119,21)" fg:x="559" fg:w="2803"/><text x="14.2600%" y="175.50">ratelimit_benchmark::benchmark_ratelimiter3_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>ratelimit::version3::RateLimiter3::ratelimit3 (2,761 samples, 69.20%)</title><rect x="15.0627%" y="149" width="69.1980%" height="15" fill="rgb(252,177,53)" fg:x="601" fg:w="2761"/><text x="15.3127%" y="159.50">ratelimit::version3::RateLimiter3::ratelimit3</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (2,621 samples, 65.69%)</title><rect x="18.5714%" y="133" width="65.6892%" height="15" fill="rgb(237,209,29)" fg:x="741" fg:w="2621"/><text x="18.8214%" y="143.50">crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (2,617 samples, 65.59%)</title><rect x="18.6717%" y="117" width="65.5890%" height="15" fill="rgb(212,65,23)" fg:x="745" fg:w="2617"/><text x="18.9217%" y="127.50">crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position</text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.10%)</title><rect x="84.3358%" y="149" width="0.1003%" height="15" fill="rgb(230,222,46)" fg:x="3365" fg:w="4"/><text x="84.5858%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2,819 samples, 70.65%)</title><rect x="13.8346%" y="181" width="70.6516%" height="15" fill="rgb(215,135,32)" fg:x="552" fg:w="2819"/><text x="14.0846%" y="191.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (9 samples, 0.23%)</title><rect x="84.2607%" y="165" width="0.2256%" height="15" fill="rgb(246,101,22)" fg:x="3362" fg:w="9"/><text x="84.5107%" y="175.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (2 samples, 0.05%)</title><rect x="84.4361%" y="149" width="0.0501%" height="15" fill="rgb(206,107,13)" fg:x="3369" fg:w="2"/><text x="84.6861%" y="159.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="84.5363%" y="165" width="0.0501%" height="15" fill="rgb(250,100,44)" fg:x="3373" fg:w="2"/><text x="84.7863%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (5 samples, 0.13%)</title><rect x="84.4862%" y="181" width="0.1253%" height="15" fill="rgb(231,147,38)" fg:x="3371" fg:w="5"/><text x="84.7362%" y="191.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.03%)</title><rect x="84.5865%" y="165" width="0.0251%" height="15" fill="rgb(229,8,40)" fg:x="3375" fg:w="1"/><text x="84.8365%" y="175.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (62 samples, 1.55%)</title><rect x="84.7118%" y="165" width="1.5539%" height="15" fill="rgb(221,135,30)" fg:x="3380" fg:w="62"/><text x="84.9618%" y="175.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (4 samples, 0.10%)</title><rect x="86.1654%" y="149" width="0.1003%" height="15" fill="rgb(249,193,18)" fg:x="3438" fg:w="4"/><text x="86.4154%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Trailer::addr_of_owned (1 samples, 0.03%)</title><rect x="86.2657%" y="165" width="0.0251%" height="15" fill="rgb(209,133,39)" fg:x="3442" fg:w="1"/><text x="86.5157%" y="175.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (21 samples, 0.53%)</title><rect x="86.2907%" y="165" width="0.5263%" height="15" fill="rgb(232,100,14)" fg:x="3443" fg:w="21"/><text x="86.5407%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (91 samples, 2.28%)</title><rect x="84.6115%" y="181" width="2.2807%" height="15" fill="rgb(224,185,1)" fg:x="3376" fg:w="91"/><text x="84.8615%" y="191.50">t..</text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (3 samples, 0.08%)</title><rect x="86.8170%" y="165" width="0.0752%" height="15" fill="rgb(223,139,8)" fg:x="3464" fg:w="3"/><text x="87.0670%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,469 samples, 86.94%)</title><rect x="0.0000%" y="325" width="86.9424%" height="15" fill="rgb(232,213,38)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,469 samples, 86.94%)</title><rect x="0.0000%" y="309" width="86.9424%" height="15" fill="rgb(207,94,22)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="319.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (3,469 samples, 86.94%)</title><rect x="0.0000%" y="293" width="86.9424%" height="15" fill="rgb(219,183,54)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="303.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (3,469 samples, 86.94%)</title><rect x="0.0000%" y="277" width="86.9424%" height="15" fill="rgb(216,185,54)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="287.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (3,469 samples, 86.94%)</title><rect x="0.0000%" y="261" width="86.9424%" height="15" fill="rgb(254,217,39)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="271.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (3,469 samples, 86.94%)</title><rect x="0.0000%" y="245" width="86.9424%" height="15" fill="rgb(240,178,23)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="255.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>tokio::runtime::context::set_scheduler (3,469 samples, 86.94%)</title><rect x="0.0000%" y="229" width="86.9424%" height="15" fill="rgb(218,11,47)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="239.50">tokio::runtime::context::set_scheduler</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (3,469 samples, 86.94%)</title><rect x="0.0000%" y="213" width="86.9424%" height="15" fill="rgb(218,51,51)" fg:x="0" fg:w="3469"/><text x="0.2500%" y="223.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,920 samples, 73.18%)</title><rect x="13.7594%" y="197" width="73.1830%" height="15" fill="rgb(238,126,27)" fg:x="549" fg:w="2920"/><text x="14.0094%" y="207.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (2 samples, 0.05%)</title><rect x="86.8922%" y="181" width="0.0501%" height="15" fill="rgb(249,202,22)" fg:x="3467" fg:w="2"/><text x="87.1422%" y="191.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="87.0677%" y="165" width="0.0251%" height="15" fill="rgb(254,195,49)" fg:x="3474" fg:w="1"/><text x="87.3177%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (15 samples, 0.38%)</title><rect x="87.1178%" y="149" width="0.3759%" height="15" fill="rgb(208,123,14)" fg:x="3476" fg:w="15"/><text x="87.3678%" y="159.50"></text></g><g><title>__rdl_alloc (13 samples, 0.33%)</title><rect x="87.1679%" y="133" width="0.3258%" height="15" fill="rgb(224,200,8)" fg:x="3478" fg:w="13"/><text x="87.4179%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.33%)</title><rect x="87.1679%" y="117" width="0.3258%" height="15" fill="rgb(217,61,36)" fg:x="3478" fg:w="13"/><text x="87.4179%" y="127.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (13 samples, 0.33%)</title><rect x="87.1679%" y="101" width="0.3258%" height="15" fill="rgb(206,35,45)" fg:x="3478" fg:w="13"/><text x="87.4179%" y="111.50"></text></g><g><title>posix_memalign (13 samples, 0.33%)</title><rect x="87.1679%" y="85" width="0.3258%" height="15" fill="rgb(217,65,33)" fg:x="3478" fg:w="13"/><text x="87.4179%" y="95.50"></text></g><g><title>__default_morecore (1 samples, 0.03%)</title><rect x="87.4687%" y="69" width="0.0251%" height="15" fill="rgb(222,158,48)" fg:x="3490" fg:w="1"/><text x="87.7187%" y="79.50"></text></g><g><title>sbrk (1 samples, 0.03%)</title><rect x="87.4687%" y="53" width="0.0251%" height="15" fill="rgb(254,2,54)" fg:x="3490" fg:w="1"/><text x="87.7187%" y="63.50"></text></g><g><title>brk (1 samples, 0.03%)</title><rect x="87.4687%" y="37" width="0.0251%" height="15" fill="rgb(250,143,38)" fg:x="3490" fg:w="1"/><text x="87.7187%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 0.60%)</title><rect x="86.9674%" y="197" width="0.6015%" height="15" fill="rgb(248,25,0)" fg:x="3470" fg:w="24"/><text x="87.2174%" y="207.50"></text></g><g><title>tokio::task::spawn::spawn (23 samples, 0.58%)</title><rect x="86.9925%" y="181" width="0.5764%" height="15" fill="rgb(206,152,27)" fg:x="3471" fg:w="23"/><text x="87.2425%" y="191.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (19 samples, 0.48%)</title><rect x="87.0927%" y="165" width="0.4762%" height="15" fill="rgb(240,77,30)" fg:x="3475" fg:w="19"/><text x="87.3427%" y="175.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (3 samples, 0.08%)</title><rect x="87.4937%" y="149" width="0.0752%" height="15" fill="rgb(231,5,3)" fg:x="3491" fg:w="3"/><text x="87.7437%" y="159.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (1 samples, 0.03%)</title><rect x="87.5439%" y="133" width="0.0251%" height="15" fill="rgb(207,226,32)" fg:x="3493" fg:w="1"/><text x="87.7939%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.43%)</title><rect x="87.5689%" y="197" width="0.4261%" height="15" fill="rgb(222,207,47)" fg:x="3494" fg:w="17"/><text x="87.8189%" y="207.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (17 samples, 0.43%)</title><rect x="87.5689%" y="181" width="0.4261%" height="15" fill="rgb(229,115,45)" fg:x="3494" fg:w="17"/><text x="87.8189%" y="191.50"></text></g><g><title>__libc_malloc (16 samples, 0.40%)</title><rect x="87.5940%" y="165" width="0.4010%" height="15" fill="rgb(224,191,6)" fg:x="3495" fg:w="16"/><text x="87.8440%" y="175.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (1 samples, 0.03%)</title><rect x="88.1955%" y="149" width="0.0251%" height="15" fill="rgb(230,227,24)" fg:x="3519" fg:w="1"/><text x="88.4455%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (5 samples, 0.13%)</title><rect x="88.2206%" y="149" width="0.1253%" height="15" fill="rgb(228,80,19)" fg:x="3520" fg:w="5"/><text x="88.4706%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (3 samples, 0.08%)</title><rect x="88.2707%" y="133" width="0.0752%" height="15" fill="rgb(247,229,0)" fg:x="3522" fg:w="3"/><text x="88.5207%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::set_join_waker (2 samples, 0.05%)</title><rect x="88.2957%" y="117" width="0.0501%" height="15" fill="rgb(237,194,15)" fg:x="3523" fg:w="2"/><text x="88.5457%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.25%)</title><rect x="88.1203%" y="165" width="0.2506%" height="15" fill="rgb(219,203,20)" fg:x="3516" fg:w="10"/><text x="88.3703%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (1 samples, 0.03%)</title><rect x="88.3459%" y="149" width="0.0251%" height="15" fill="rgb(234,128,8)" fg:x="3525" fg:w="1"/><text x="88.5959%" y="159.50"></text></g><g><title>__libc_free (6 samples, 0.15%)</title><rect x="88.3960%" y="149" width="0.1504%" height="15" fill="rgb(248,202,8)" fg:x="3527" fg:w="6"/><text x="88.6460%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.03%)</title><rect x="88.5464%" y="149" width="0.0251%" height="15" fill="rgb(206,104,37)" fg:x="3533" fg:w="1"/><text x="88.7964%" y="159.50"></text></g><g><title>futures_task::waker::drop_arc_raw (1 samples, 0.03%)</title><rect x="88.5464%" y="133" width="0.0251%" height="15" fill="rgb(223,8,27)" fg:x="3533" fg:w="1"/><text x="88.7964%" y="143.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (3 samples, 0.08%)</title><rect x="88.5714%" y="133" width="0.0752%" height="15" fill="rgb(216,217,28)" fg:x="3534" fg:w="3"/><text x="88.8214%" y="143.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="88.6216%" y="117" width="0.0251%" height="15" fill="rgb(249,199,1)" fg:x="3536" fg:w="1"/><text x="88.8716%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;futures_util::future::try_future::into_future::IntoFuture&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt; (12 samples, 0.30%)</title><rect x="88.3709%" y="165" width="0.3008%" height="15" fill="rgb(240,85,17)" fg:x="3526" fg:w="12"/><text x="88.6209%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (4 samples, 0.10%)</title><rect x="88.5714%" y="149" width="0.1003%" height="15" fill="rgb(206,108,45)" fg:x="3534" fg:w="4"/><text x="88.8214%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.03%)</title><rect x="88.6466%" y="133" width="0.0251%" height="15" fill="rgb(245,210,41)" fg:x="3537" fg:w="1"/><text x="88.8966%" y="143.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (70 samples, 1.75%)</title><rect x="86.9674%" y="213" width="1.7544%" height="15" fill="rgb(206,13,37)" fg:x="3470" fg:w="70"/><text x="87.2174%" y="223.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (29 samples, 0.73%)</title><rect x="87.9950%" y="197" width="0.7268%" height="15" fill="rgb(250,61,18)" fg:x="3511" fg:w="29"/><text x="88.2450%" y="207.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (29 samples, 0.73%)</title><rect x="87.9950%" y="181" width="0.7268%" height="15" fill="rgb(235,172,48)" fg:x="3511" fg:w="29"/><text x="88.2450%" y="191.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (2 samples, 0.05%)</title><rect x="88.6717%" y="165" width="0.0501%" height="15" fill="rgb(249,201,17)" fg:x="3538" fg:w="2"/><text x="88.9217%" y="175.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.03%)</title><rect x="88.7469%" y="149" width="0.0251%" height="15" fill="rgb(219,208,6)" fg:x="3541" fg:w="1"/><text x="88.9969%" y="159.50"></text></g><g><title>chrono::offset::utc::Utc::now (4 samples, 0.10%)</title><rect x="88.7218%" y="165" width="0.1003%" height="15" fill="rgb(248,31,23)" fg:x="3540" fg:w="4"/><text x="88.9718%" y="175.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.05%)</title><rect x="88.7719%" y="149" width="0.0501%" height="15" fill="rgb(245,15,42)" fg:x="3542" fg:w="2"/><text x="89.0219%" y="159.50"></text></g><g><title>clock_gettime (2 samples, 0.05%)</title><rect x="88.7719%" y="133" width="0.0501%" height="15" fill="rgb(222,217,39)" fg:x="3542" fg:w="2"/><text x="89.0219%" y="143.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1 samples, 0.03%)</title><rect x="88.8722%" y="149" width="0.0251%" height="15" fill="rgb(210,219,27)" fg:x="3546" fg:w="1"/><text x="89.1222%" y="159.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.03%)</title><rect x="88.8722%" y="133" width="0.0251%" height="15" fill="rgb(252,166,36)" fg:x="3546" fg:w="1"/><text x="89.1222%" y="143.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (1 samples, 0.03%)</title><rect x="88.8722%" y="117" width="0.0251%" height="15" fill="rgb(245,132,34)" fg:x="3546" fg:w="1"/><text x="89.1222%" y="127.50"></text></g><g><title>__libc_malloc (82 samples, 2.06%)</title><rect x="89.0476%" y="117" width="2.0551%" height="15" fill="rgb(236,54,3)" fg:x="3553" fg:w="82"/><text x="89.2976%" y="127.50">_..</text></g><g><title>&lt;alloc::boxed::Box&lt;[I]&gt; as core::iter::traits::collect::FromIterator&lt;I&gt;&gt;::from_iter (88 samples, 2.21%)</title><rect x="88.9223%" y="133" width="2.2055%" height="15" fill="rgb(241,173,43)" fg:x="3548" fg:w="88"/><text x="89.1723%" y="143.50">&lt;..</text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="91.1028%" y="117" width="0.0251%" height="15" fill="rgb(215,190,9)" fg:x="3635" fg:w="1"/><text x="91.3528%" y="127.50"></text></g><g><title>__rdl_alloc (39 samples, 0.98%)</title><rect x="91.1278%" y="133" width="0.9774%" height="15" fill="rgb(242,101,16)" fg:x="3636" fg:w="39"/><text x="91.3778%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (39 samples, 0.98%)</title><rect x="91.1278%" y="117" width="0.9774%" height="15" fill="rgb(223,190,21)" fg:x="3636" fg:w="39"/><text x="91.3778%" y="127.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (39 samples, 0.98%)</title><rect x="91.1278%" y="101" width="0.9774%" height="15" fill="rgb(215,228,25)" fg:x="3636" fg:w="39"/><text x="91.3778%" y="111.50"></text></g><g><title>posix_memalign (38 samples, 0.95%)</title><rect x="91.1529%" y="85" width="0.9524%" height="15" fill="rgb(225,36,22)" fg:x="3637" fg:w="38"/><text x="91.4029%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.05%)</title><rect x="92.1053%" y="133" width="0.0501%" height="15" fill="rgb(251,106,46)" fg:x="3675" fg:w="2"/><text x="92.3553%" y="143.50"></text></g><g><title>ratelimit_benchmark::benchmark_ratelimiter3_tokio::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (424 samples, 10.63%)</title><rect x="88.7218%" y="181" width="10.6266%" height="15" fill="rgb(208,90,1)" fg:x="3540" fg:w="424"/><text x="88.9718%" y="191.50">ratelimit_benchm..</text></g><g><title>ratelimit::version3::RateLimiter3::ratelimit3 (420 samples, 10.53%)</title><rect x="88.8221%" y="165" width="10.5263%" height="15" fill="rgb(243,10,4)" fg:x="3544" fg:w="420"/><text x="89.0721%" y="175.50">ratelimit::vers..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (417 samples, 10.45%)</title><rect x="88.8972%" y="149" width="10.4511%" height="15" fill="rgb(212,137,27)" fg:x="3547" fg:w="417"/><text x="89.1472%" y="159.50">crossbeam_skipl..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (287 samples, 7.19%)</title><rect x="92.1554%" y="133" width="7.1930%" height="15" fill="rgb(231,220,49)" fg:x="3677" fg:w="287"/><text x="92.4054%" y="143.50">crossbeam_..</text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="99.3985%" y="165" width="0.0251%" height="15" fill="rgb(237,96,20)" fg:x="3966" fg:w="1"/><text x="99.6485%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (4 samples, 0.10%)</title><rect x="99.3484%" y="181" width="0.1003%" height="15" fill="rgb(239,229,30)" fg:x="3964" fg:w="4"/><text x="99.5984%" y="191.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.03%)</title><rect x="99.4236%" y="165" width="0.0251%" height="15" fill="rgb(219,65,33)" fg:x="3967" fg:w="1"/><text x="99.6736%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (429 samples, 10.75%)</title><rect x="88.7218%" y="197" width="10.7519%" height="15" fill="rgb(243,134,7)" fg:x="3540" fg:w="429"/><text x="88.9718%" y="207.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.03%)</title><rect x="99.4486%" y="181" width="0.0251%" height="15" fill="rgb(216,177,54)" fg:x="3968" fg:w="1"/><text x="99.6986%" y="191.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="99.4737%" y="181" width="0.0501%" height="15" fill="rgb(211,160,20)" fg:x="3969" fg:w="2"/><text x="99.7237%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (3 samples, 0.08%)</title><rect x="99.4737%" y="197" width="0.0752%" height="15" fill="rgb(239,85,39)" fg:x="3969" fg:w="3"/><text x="99.7237%" y="207.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.03%)</title><rect x="99.5238%" y="181" width="0.0251%" height="15" fill="rgb(232,125,22)" fg:x="3971" fg:w="1"/><text x="99.7738%" y="191.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (8 samples, 0.20%)</title><rect x="99.6241%" y="181" width="0.2005%" height="15" fill="rgb(244,57,34)" fg:x="3975" fg:w="8"/><text x="99.8741%" y="191.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.03%)</title><rect x="99.7995%" y="165" width="0.0251%" height="15" fill="rgb(214,203,32)" fg:x="3982" fg:w="1"/><text x="100.0495%" y="175.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (5 samples, 0.13%)</title><rect x="99.8246%" y="181" width="0.1253%" height="15" fill="rgb(207,58,43)" fg:x="3983" fg:w="5"/><text x="100.0746%" y="191.50"></text></g><g><title>all (3,990 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(215,193,15)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="639.50"></text></g><g><title>ratelimit_bench (3,990 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(232,15,44)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="623.50">ratelimit_bench</text></g><g><title>_start (3,990 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(212,3,48)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="607.50">_start</text></g><g><title>__libc_start_main (3,990 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(218,128,7)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="591.50">__libc_start_main</text></g><g><title>main (3,990 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(226,216,39)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (3,990 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(243,47,51)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,990 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(241,183,40)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,990 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(231,217,32)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,990 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(229,61,38)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,990 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(225,210,5)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (3,990 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(231,79,45)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,990 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(224,100,7)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,990 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(241,198,18)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,990 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(252,97,53)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,990 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(220,88,7)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,990 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(213,176,14)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ratelimit_benchmark::main (3,990 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(246,73,7)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="383.50">ratelimit_benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (3,990 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(245,64,36)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="367.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (3,990 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(245,80,10)" fg:x="0" fg:w="3990"/><text x="0.2500%" y="351.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (521 samples, 13.06%)</title><rect x="86.9424%" y="325" width="13.0576%" height="15" fill="rgb(232,107,50)" fg:x="3469" fg:w="521"/><text x="87.1924%" y="335.50">&lt;criterion::routine:..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (521 samples, 13.06%)</title><rect x="86.9424%" y="309" width="13.0576%" height="15" fill="rgb(253,3,0)" fg:x="3469" fg:w="521"/><text x="87.1924%" y="319.50">criterion::bencher::..</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (521 samples, 13.06%)</title><rect x="86.9424%" y="293" width="13.0576%" height="15" fill="rgb(212,99,53)" fg:x="3469" fg:w="521"/><text x="87.1924%" y="303.50">&lt;tokio::runtime::run..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (521 samples, 13.06%)</title><rect x="86.9424%" y="277" width="13.0576%" height="15" fill="rgb(249,111,54)" fg:x="3469" fg:w="521"/><text x="87.1924%" y="287.50">tokio::runtime::cont..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (521 samples, 13.06%)</title><rect x="86.9424%" y="261" width="13.0576%" height="15" fill="rgb(249,55,30)" fg:x="3469" fg:w="521"/><text x="87.1924%" y="271.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::context::set_scheduler (521 samples, 13.06%)</title><rect x="86.9424%" y="245" width="13.0576%" height="15" fill="rgb(237,47,42)" fg:x="3469" fg:w="521"/><text x="87.1924%" y="255.50">tokio::runtime::cont..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (521 samples, 13.06%)</title><rect x="86.9424%" y="229" width="13.0576%" height="15" fill="rgb(211,20,18)" fg:x="3469" fg:w="521"/><text x="87.1924%" y="239.50">tokio::runtime::cont..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (450 samples, 11.28%)</title><rect x="88.7218%" y="213" width="11.2782%" height="15" fill="rgb(231,203,46)" fg:x="3540" fg:w="450"/><text x="88.9718%" y="223.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (18 samples, 0.45%)</title><rect x="99.5489%" y="197" width="0.4511%" height="15" fill="rgb(237,142,3)" fg:x="3972" fg:w="18"/><text x="99.7989%" y="207.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (2 samples, 0.05%)</title><rect x="99.9499%" y="181" width="0.0501%" height="15" fill="rgb(241,107,1)" fg:x="3988" fg:w="2"/><text x="100.1999%" y="191.50"></text></g></svg></svg>